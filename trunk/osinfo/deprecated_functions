#!/bin/bash
echo "Don't run this file"
exit 1
#######################
# OEM INFORMATION (rewrite)
# this module is deprecated in favor of module_dmi
#
# also, this is broken due to extr_lshw subfunction, this function
# is caught in an eternal loop, no idea why. probably easy to solve.
#
# this module collects information from lshw, a somewhat rare package, which
# tells a lot of interesting information of the system hardware.  it also seems
# to be the only way to get the serial number of a branded computer, thus 'oem
# info'. below is an excerpt from 'man lshw'
#
# lshw  is a small tool to extract detailed information on the hardware
# configuration of the machine. It can report exact memory configuration,
# firmware version, mainboard configuration, CPU version and  speed,  cache
# configuration,  bus  speed, etc. on DMI-capable x86 or IA-64 systems and on
# some PowerPC machines (PowerMac G4 is known to work).  It currently supports
# DMI (x86 and IA-64 only), OpenFirmware device tree (PowerPC only),  PCI/AGP,
# CPUID  (x86),IDE/ATA/ATAPI, PCMCIA (only tested on x86), SCSI and USB.
Module_oem() {
	local moduleName="OEM information"
	module_header "${moduleName}"

	if CheckReq_lshw && CheckReq_root; then

		# the interesting entries:
		# $hostname
		# core
		# firmware

		local NODES="$(hostname) core firmware"

		oem_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$oem_info" )

		# following loop extracts the data under the nodes variable.

		# (1) get the line number where the 'node id=$NODES'
		# (2) get the line number of the next 'node id'
		# (3) everything in between those lines contains interesting data

		for myNODE in $NODES; do

			extr_lshw_xml_node $myNODE > $oem_tmp

			local IFSbk="$IFS"
			IFS=$'\n'

			#for info in $(); do
			for info in $(cat $oem_tmp); do

				# the data is avaiable here, printed line by line.
				# usually the fields are:

				# <description>
				# <product>
				# <vendor>
				# <version>
				# <serial>

				# then there special fields. see 'lshw -xml'

				# parse standard <foo> tags
				# TODO: add support for capabilities tags
				local tag="$(grep -o '<[a-z]*>' <<< ${info} | \
							sed 's/<\([^>]*\)>/\1/')"
							# matched everything between '<' and '>'

				[ "$tag" ] && \
				local value="$(grep ${tag} <<< ${info} | \
							awk -F'<|>' {'print $3'})"

				# here the data is processed
				case $myNODE in

					"$(hostname)")	# OEM info

						if [ "$printed" != "oem" ]; then
							value_header	"OEM info"
							local printed="oem"
						fi

						case $tag in

							'description')

								add_attribute 'System model' \
								              'system_model'
								add_values    "$value"
								;;

							'vendor')

								add_attribute 'System manufacturer' \
								              'system_manufacturer'
								add_values    "$value"
								;;

							'product')

								add_attribute 'System name'
								add_values    "$value"
								;;

							'version')

								add_attribute 'System version'
								add_values    "$value"
								;;

							'serial')

								add_attribute 'OEM serial number' \
								              'computer_product_serial'
								add_values    "$value"
								;;

							#*)

								#add_attribute "$tag"
								#add_values    "$value"
								#;;

						esac

						value_footer
						;;

					'core')			# mobo info

						if [ "$printed" != "mobo" ]; then
							value_header	"Motherboard"
							local printed="mobo"
						fi

						case $tag in

							'vendor')

								add_attribute 'Make'
								add_values    "$value"
								;;

							'product')

								add_attribute 'Model'
								add_values    "$value"
								;;

							'version')

								add_attribute 'Revision'
								add_values    "$value"
								;;

							'serial')
								add_attribute 'Serial number' \
								              'mother_board_serial_number'
								add_values    "$value"
								;;

						esac

						value_footer
						;;

					'firmware')		# BIOS info

						if [ "$printed" != "bios" ]; then
							value_header	"BIOS"
							local printed="bios"
						fi

						case $tag in

							'vendor')

								add_attribute 'Vendor'
								add_values    "$value"
								;;

							'version')

								add_attribute 'Revision'	'bios_version'
								add_values    "$value"

								# trying to extract date from version
								add_attribute 'Date'	'bios_date'
								add_values    "$(echo $value | \
								                 grep -Eo '([0-9]{2,4}[-./][0-9]{2}[-./][0-9]{2,4})+')"
								;;

							'date')

								add_attribute 'Date'	'bios_date'
								add_values    "$value"

								;;

							'serial')
								add_attribute 'Serial number' \
								              'bios_serial_number'
								add_values    "$value"
								;;

						esac

						#value_footer
						# this produces an eternal loop
						;;

				esac

			done

			IFS="$IFSbk"

		done
	fi

	module_footer
	flush_values
}


Module_oem_old() {
# OEM INFORMATION
# deprecated, as this module has been rewritten. left here for reference.
	moduleName="OEM information"
	module_header "${moduleName}"
	error_deprecated Module_oem_old osinfo.modules

	if CheckReq_lshw && CheckReq_root; then

		lshw_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$lshw_tmp")
		lshw > $lshw_tmp

		# principle:
		# (1) output of lshw is stripped out of newlines, switched spaces with _ and
		#     added %newline% to denote a value pair
		# (2) this is put into hardware array, because bash doesn't support
		#     two-dimensional arrays
		# (3) a for loop then checks each array element for OUTPUT type node ID.
		# (4) another loop checks for DO_NOT_OUTPUT ; if this is satisfied,
		#     values are sent with add_values()


		# the verbosity of this module can be controlled by modifying the
		# OUTPUT and DO_NOT_OUTPUT strings. the example below should be clear.

		OUTPUT="$(hostname)\|cpu\|core\|firmware\|memory\|cdrom\|disk"
		DO_NOT_OUTPUT="description\|capabilities\|configuration\|resources\|physical\|bus"

		[[ "$isverbose" -eq 1 ]] &&
		OUTPUT=$OUTPUT"\|ide\|pci\|usb"


		# this loop fills the $hardware[] array with entries from lshw.
		#
		# 1) the leading spaces are removed
		# 2) whitespaces are converted to underscores
		# 3) newlines are replaced by '%newline%'
		# 4) the '*' character is the node identifier in lshw.
		#
		# the product of this is an array, where an item contains
		# all information of the node parsed to a single string.
		for node in $(seq 0 1 $(

				grep '\*' ${lshw_xml_file} | wc -l

				#cat ${lshw_xml_file} | sed 's/^ *//' | tr ' ' '_' | \
				#sed ':a;N;$!ba;s/\n/%node%/g' | awk -F"*" {'print NF'}

				));	do

		 #hardware_debug[$HW]="foo"
		 #echo $HW
		 #echo ${#hardware[@]}
		 oem_str[$node]="$(

			sed 's/^ *//g' ${lshw_xml_file} | tr ' ' '_' | \
			sed ':a;N;$!ba;s/\n/%newline%/g' | awk -F"*" {'print $('$node'+1) '}

		)"

		done

	# then fix the first node so that the hostname isn't printed
		oem_str[0]="-${oem_str[0]}"


		# parse the string in a loop
		for node in $(seq 0 1 ${#oem_str[@]}); do

		# if the oem_string contains an interesting node...
			if [ "$(echo ${oem_str[$node]} | awk -F'%newline%' {'print $1'} | \
			grep -i $OUTPUT)" ]; then # we want output

			myELEMENT=1;

			# then parse all elements in the array
			while [ "$(echo ${oem_str[$node]} | \
				awk -F'%newline%' {'print NF'})" -gt "$myELEMENT" ]; do


			 # if the node doesn't contain info we don't want..
				if [ ! "$(echo ${oem_str[$node]} | \
					awk -F'%newline%' {'print $'$myELEMENT' '} | \
					grep -i $DO_NOT_OUTPUT)" ]; then

					# the oem_string is extracted into a variable
					oem_node="$(echo ${oem_str[$node]} | \
						awk -F'%newline%' {'print $'$myELEMENT' '})"

					# then prune out the *-foo nodes
					# and send the data to add_values()
					if [ ! "$(echo ${oem_node} | grep '^-')" ]; then

						add_attribute	"  $(echo ${oem_node} | \
							awk -F":_" {'print $1'} | tr '_' ' ')"

						add_values		"  $(echo ${oem_node} | \
							awk -F":_" {'print $2'} | tr '_' ' ')"

					fi

					# 'description' values are printed as headers
				elif [ "$(echo ${oem_str[$node]} | \
					awk -F'%newline%' {'print $'$myELEMENT' '} | \
					grep -i 'description')" ]; then

					value_header	"$(echo ${oem_str[$node]} | \
						awk -F'%newline%' {'print $'$myELEMENT' '} | \
						awk -F":_" {'print $2'} | tr '_' ' ')"

				fi

				((myELEMENT++));
			done
			fi
		done


	fi

	module_footer
	flush_values
}


################################################################################
# NOTE: THIS FUNCTION IS DEPRECATED
# Adds a identifier and a value to "$name_value_pair_list".
# Parameters:
#   1 string   Name
#   2 string   Value
#
# WARNING: Do NOT indent! Uses a TWO line string!

name_value_pair_list=""
k_title=""

add_name_value_pair() {
	error_deprecated add_name_value_pair osinfo
	name_value_pair_list="${name_value_pair_list}$(echo $1$2)\n"
	# uses a funny character '' that later will be parsed.
	# not very sophisticated. :/


	[ "$usekdialog" == "1" ] && let "linecount = $linecount + 1"

	# kdialog is unmaintained, but left here for future revisions.

	#$(echo "$1" | tr ' ' '_')Å$(echo "$2" | tr ' ' '_')"
	# Uses "Å" (AltGr+L) because it is uncommon
	#TODO: sed don't work with non Latin space replacement. Why?
}
################################################################################




################################################################################
# Prints "$name_value_pair_list" then empties the "$name_value_pair_list"
# Uses colours
# DEPRECATED
# Uses the "column" tool
flush_name_value_pair() {
	error_deprecated flush_name_value_pair osinfo
	if [ "$usexml" == 1 ]; then


		##############################################
		# this outputs XML
		# Operation method: breaks value pair list into components, runs a for loop
		# and parses the items into xml. needs a variable to aid the process.
		# Could be better. :)


		#### OUTER OPENING TAG
		if [ "$value_pair_header" ]; then
			for indent in $(seq 0 1 $XML_INDENT); do
				echo -ne "\t" | tee -a "${XMLFILE}"
			done
			((XML_INDENT++))
			echo -e "$(xml_tag_start "${value_pair_header}")" 	| tee -a "${XMLFILE}"		# open tag
			unset value_pair_header
		fi

		unset openTag
		#			tr -s '' '\n' | \
		for value in $(
			echo  -e "$name_value_pair_list" | \
				tr -s ' ' ''
			# TODO: is it possible to run a for loop with the whitescapes, each line only
			# constituting a new item in the loop, (not using whitescape, rather \n as the mark)?
		); do

		 #echo ${value}
		 value1="$(awk -F {'print $1'} <<< "${value}")"
		 value2="$(awk -F {'print $2'} <<< "${value}")"


		 if [ ! "${openTag}" ]; then
			 #echo "new tag"
			 #echo $value1
			 for indent in $(seq 0 1 $XML_INDENT); do echo -ne "\t" | tee -a "${XMLFILE}"
			 done
			 ((XML_INDENT++))
			 echo -e "$(xml_tag_start "${value1}")" | tr '' ' '	| tee -a "${XMLFILE}"	# open tag
			 openTag=${value1}

			 if [  "${value2}" ]; then
				 for indent in $(seq 0 1 $XML_INDENT); do echo -ne "\t" | tee -a "${XMLFILE}"
				 done
				 #echo "write data"
				 #echo $value2

				 echo -e "${value2}"  | tr '' ' '		| tee -a "${XMLFILE}"	# write content
			 fi

			 #echo "close tag"
			 #echo $value1
			 ((XML_INDENT--))
			 for indent in $(seq 0 1 $XML_INDENT); do echo -ne "\t" | tee -a "${XMLFILE}"
			 done
			 echo -e "$(xml_tag_stop "${openTag}")"  | tr '' ' '	| tee -a "${XMLFILE}"		# close tag
			 unset openTag;
		 fi


		 #### OUTER CLOSING TAG
		 if [ "$value_pair_footer" ]; then
			 for indent in $(seq 0 1 $XML_INDENT); do echo -ne "\t" | tee -a "${XMLFILE}"
			 done
			 ((XML_INDENT--))
			 echo -e "$(xml_tag_stop "${value_pair_footer}")" 	| tee -a "${XMLFILE}"		# close
			 unset value_pair_footer
		 fi

		done
		##############################################

	elif [ "$usekdialog" -eq 1 ]; then

		##############################################
		# this outputs to KDIALOG
		# this is completely unmaintained. doesn't work

		TMPFILE="${TMPDIR:-/tmp}/${appname}.1.$$"
		echo -e "\n$value_pair_header"
		echo  "$name_value_pair_list" | \
			tr '' '\t' | \
			tr '' ' ' > $TMPFILE
		kdialog --textbox "$TMPFILE" 600 "$linecount" --title "$k_title"
		rm $TMPFILE

	else

		# FIXME: This bit doesn't work at all on Gentoo 2006.0 64-bit
		#set -x
		###############################################
		# output to STDOUT

		[[ "$value_pair_header" ]] && echo -e "\n$value_pair_header"
		echo -e "$name_value_pair_list" | \
			column -ts '' | \
			sed "s/^\([-_.A-Za-z0-9()]*\)/${tBOLD}\1${tSTD}/" | \
			tr '' '\t'
		#set +x
	fi

	unset name_value_pair_list
	unset value_pair_header
	linecount=0
}
################################################################################



# This function formulates $infostring for stdout
# header tags are printed; attribute names are printed;
# values for each attribute are printed on the same line
# separated with a tab.
#
# $value_string is formulated in the following steps:
#  1 Test if item does not begin with '%' => add value + tab to string; next
#  2 If there is an attribute tag open => add newline to string
#  3 If the item begins with %attribute% => add attribute + tab to string
#    If there is a need to add more tabs for indentation, add tabs ; next
#  4 If the item begins with %header% => add header + newline to string; next
#
#  Finally $value_string is printed at once.
function print_stdout {
	# Get tabsize dynamically
	local TABSIZE=$(tput it)

	# this routine gets the longest header string in $infostring
	local longest_attrib=0 value_nr=0
	local item name

	for itemnr in $(seq 0 1 $((${#infostring[@]}-1))); do
		item="${infostring[$itemnr]}"
		#echo $item
		if [ "$(grep '^%attribute%' <<< "${item}")" ]; then

			# prune out the attribute id and the xml code tag
			item="$(sed s/%attribute%// <<< "${item}")"
			name=$(awk -F\; {'print $1'} <<< "${item}")

			if [ ${#name} -gt $longest_attrib ]; then
				longest_attrib=${#name}
			fi
			
		fi
	done


	# this routine formulates $value_string
	# mechanism: sequentially parse the $infostring from start to end
	# and copy the contents to $item. if $item does not contain formulating
	# info (begin with %), then it is copied to $value_string.

	INDEX=0 ; value_string="" ; attribute="closed"
	for itemnr in $(seq 0 1 $((${#infostring[@]}-1)) ); do
		item="${infostring[$itemnr]}"

		# print the value item and deduce proper indentation.
		if [ ! "$(grep '^%' <<< "${item}")" ]; then

			#set -x
			# this checks whether the value is at a start of string
			#if [ "${value_string}" = *$'\n' ]; then
			# FIXME: -1:2 is a dirty hack. newline is not properly detected
			if [ "${value_string: -1:2}" == "\n" ]; then
				value_nr=0
			fi
			#set +x

			#[ $value_nr -gt 1 ] && exit 0

			# increase the horizontal slot id of the value
			((value_nr++))

			# this array holds the value string lengths for each
			# horizontal position (value_nr)
			[ ! ${longest_value[$value_nr]} ] && longest_value[$value_nr]=0
			if [ ${#item} -gt ${longest_value[$value_nr]} ]; then
				longest_value[$value_nr]=${#item}
			fi

			# if the value is not first, check indentation
			# FIXME: this is broken
			if [ ${value_nr} -gt 1 ]; then
			#if [ 1=0 ]; then
			#echo "item: "${#item}
			#echo "max: "${longest_value[$value_nr]}
			#echo "value_nr: "$value_nr

				unset tab_string

				#set -x
				# max_indent is the indentation (in tabs) of the longest
				# value string. diff_indent is the difference between 
				# the length of the current item and the max_indent

				# also:
				# awk 'END { printf("%1d\n",15/8+.5); }' </dev/null 

				local max_indent="$(bc -l <<< " \
						"${longest_value[$value_nr]}/$TABSIZE)"
				local tabs_to_add="$(bc -l <<< $max_indent-${#item}/$TABSIZE)"
				# round up
				if [ "${tabs_to_add}:0:1" != "." ] && \
					[ "${tabs_to_add:2:3}" != "000" ]; then
						tabs_to_add="$(bc -s <<< $tabs_to_add+1)"
				fi

				tabs_to_add="${tabs_to_add:0:1}"

				#tabs_to_add="$(bc -l <<< $tabs_to_add/$TABSIZE)"
				# same applies here..
				#((tabs_to_add++))

				#set +x
				if [ $tabs_to_add -ge 1 ]; then
					for i in $(seq 1 1 $tabs_to_add); do
						local tab_string="${tab_string}\t"
					done
				fi

				local value_string="${value_string}${item}${tab_string}"


			else # the first value for the attribute
			#set +x

				# max_indent is the indentation (in tabs) of the longest
				# attribute string. tabs_to_add is the difference between 
				# the length of the current item and the max_indent
				local max_indent=$(($longest_attrib/$TABSIZE))
				local tabs_to_add=$(($max_indent-${#name}/$TABSIZE))

				#echo "diff : $diff"
				#if [ ${#name} -ne $TABSIZE ]; then
				# bc might not be available everywhere. not sure about that.
				#set -x
				#foo=$(echo ${#name}/$TABSIZE | bc -l | awk -F. {'print $NF'})
				#echo $foo
				#exit 0
				#if [ ${#name} -ne $TABSIZE ]; then
				#if [ $diff -ne 0 ]; then
					#tabs_to_add=$(($diff/$TABSIZE+1))
					#local tabs_to_add=$diff_indent
					#echo "tabs to add : " $tabs_to_add
					if [ $tabs_to_add -ge 1 ]; then
						unset tab_string
						for i in $(seq 1 1 $tabs_to_add); do
							local tab_string="${tab_string}\t"
						done
					fi
				#fi
				
				local value_string="${value_string}${tab_string}${item}";
				#local value_string="${value_string}${item}";

			fi


		else # print attributes and headers

			# if an attribute is open, print a newline
			if [ "$attribute" == "open" ]; then
				local value_string="${value_string}\n"
				attribute="closed"
				unset longest_value
				value_nr=0
			fi


			# prints header
			if [ "$(grep '^%header%' <<< "${item}")" ]; then
				local item="$(sed s/%header%// <<< "${item}")"
				local value_string="${value_string}${tcGREEN}${item}${tSTD}\n";
				value_nr=0


			# prints attribute
			elif [ "$(grep '^%attribute%' <<< "${item}")" ]; then

				local item="$(sed s/%attribute%// <<< "${item}")"
				local name=$(awk -F\; {'print $1'} <<< "${item}")
				local value_string="${value_string}${name}\t";
				attribute="open"
				value_nr=0


			fi
		fi
	done

	#local value_string=$(column -t <<< ${value_string})

	echo -e "${value_string}\n" 
	# this sed makes the first item bold
	#| sed "s/^\([-_.A-Za-z0-9()]*\)/${tBOLD}\1${tSTD}/"
}

