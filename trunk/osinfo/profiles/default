default_profile() {
 	for module in $module_cmds; do
	
		# TODO: check that the module being called is supported on the running OS

		# TODO: something like this to not even attempt to run REQ_ROOT modules
		#       as normal user, but shouldn't burden the script too much
		#       with excessive loops
		#allowed_modules=''
		#if ! CheckReq_root; then
		#	allowed_modules=$MODULES_ALL-$MODULES_SU_ONLY
		#fi

		if [ $module = 'all' ]; then
			if [ "$SYSTEM" == "linux" ] ; then
				#module_cmds="$MODULES_LINUX"
				break
			# TODO: please check if this works on bsd and old bash
			elif [ "$(grep -i bsd <<< "$SYSTEM")" ]; then
				#module_cmds="$MODULES_BSD"
				break
			fi
		elif [ $module = 'lanforce' ]; then
			lanforce=1
			usexml=1
			#module_cmds="$MODULES_LANFORCE"
			break
		fi

		validate_arg "$module" "$MODULES_ALL $MODULES_META" || wrong_module "$modul"
		# validate_arg is called to check that the module exits at all.
		# AnMaster: If we DON'T validate user input *and* use eval below we
		#           are *realy* stupid. So don't comment that out.
		#           Instead update the variable MODULES_ALL in osinfo.modules
		#           We MUST validate the user input if we are going to use eval
		#           otherwise someone could use that to run something evil
		#           (as root), like rm -rf /.

	done

	if [ "$prefix" != '/' ] ; then
		tmp_module_cmds="$module_cmds"
		module_cmds=""
		for modul in $tmp_module_cmds; do
			realrootrequired=0
			for real_root_modul in $MODULES_REAL_ROOT_ONLY; do
				[ "$modul" == "$real_root_modul" ] && realrootrequired=1
			done
			[ $realrootrequired -eq 0 ] && module_cmds="$module_cmds $modul"
		done
	fi

	[ $usexml -eq 1 ] && print_xml_header > "${XMLFILE}"


	# this calls the module definitions. as there are Meta-modules
	# and the actual modules, we first check if there's a Meta-module
	# of that name. in that case, it is used.
	# NOTE: FreeBSD runs all modules

 	for module in $module_cmds; do

		case $module in

				system|\
				distro|\
				kernel|\
				processor|\
				ram|\
				memory|\
				hdd|\
				network|\
				wlan|\
				dmi|\
				battery|\
				applications|\
				terminal|\
				devices|\
				cdrom|\
				users|\
				services) \
				Module_${module}
				;;

			*)
				if [ $isdebug -eq 1 ]; then
					info "You are running an experimental module $module - beware"
					flush_values

					eval metamod="\${Meta_${module}}"

					if [ "$(echo $metamod)" ]; then

						for submodule in $metamod; do

							Module_${submodule}

						done

					else

						Module_${module}

					fi
				else
					info "Experimental module $module will not be executed - run with the -d switch"
					flush_values
				fi

				;;

		esac
	done


	#[ "$usekdialog" -ne 1 ]  #&& print_line

	if [ $usexml -eq 1 ]; then
		print_xml_footer >> "${XMLFILE}"
	fi

	# Remove temporary files:
	cleanup_temp_files
}
