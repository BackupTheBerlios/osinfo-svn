###########################
# CD/DVD DEVICES and media
#
Module_cdrom() {
	local moduleName="CD/DVD drives"
	module_header "${moduleName}"

	local cdrom_count=0

	### drives

	if CheckReq "lshw" && CheckReq_root "information of cd/dvd drives" ; then
		cdrom_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
		cdrom_tmp2="$(mktemp /tmp/osinfo.XXXXXX)"
		udev_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$cdrom_tmp" "$cdrom_tmp2" "$udev_tmp")

		local cdrom_node cdrom_model cdrom_type cdrom_serial cdrom_bus cdrom_modes

		lshw_xml
		if [ "$(grep -i cdrom $lshw_xml_file)" ]; then
			extr_node 'node id="cdrom' $lshw_xml_file /node > $cdrom_tmp

			#for debugging:
			#extr_node 'node id="cdrom' debug/lshw-platon /node > $cdrom_tmp
			# cat $cdrom_tmp

			# extr_node echoes back all the cdrom drives in the system,
			# let's see how many
			cdrom_count="$(grep 'node id="cdrom' $cdrom_tmp | wc -l)"

			for drv_nr in $(seq 1 1 $cdrom_count); do

				# collect information;
				# if more than one unprocessed drives are found...
				if [ $drv_nr -lt $cdrom_count ]; then

					# process this drive in the temp file
					sed -n "/%node $drv_nr%/,/%node $(($drv_nr+1))%/{p;}" \
					    $cdrom_tmp > $cdrom_tmp2

					# DEBUG:
					# KEEP THESE for testing times on ubuntu
					#local this_node="$(grep -n "%node $drv_nr%" $cdrom_tmp | \
					#	awk -F: {'print $1'})"
					#local next_node="$(grep -n "%node $(($drv_nr+1))%" $cdrom_tmp | \
					#	awk -F: {'print $1'})"
					#sed -n "$this_node,$next_node{p;}" $cdrom_tmp > $cdrom_tmp2


				else # one unprocessed drive..

					# process temp file to EOF (\$)
					sed -n "/%node $drv_nr%/,\${p;}" $cdrom_tmp > $cdrom_tmp2

					#local this_node="$(grep -n "%node $drv_nr%" $cdrom_tmp | \
					#	awk -F: {'print $1'})"
					#sed -n "$this_node,\${p;}" $cdrom_tmp > $cdrom_tmp2

				fi


				# get parameters from file
				extract_cdrom_params "$cdrom_tmp2"


				# display data for LanForce
				if [ $lanforce -eq 1 ]; then

					# print attribute only once
					[ $drv_nr -eq 1 ] && add_attribute 'Model'	'cdrom'
					add_values    "${cdrom_model[$drv_nr]}"

				else # standard xml and stdout

					add_header  "CD/DVD drive $drv_nr" "cd_drive name"

					add_attribute 'Model'	'cdrom'
					add_values    "${cdrom_model[$drv_nr]}"

					add_attribute 'Drive type'
					add_values    "${cdrom_type[$drv_nr]}"

					add_attribute 'Serial number'
					add_values    "${cdrom_serial[$drv_nr]}"

					add_attribute 'Physical bus'
					add_values    "${cdrom_bus[$drv_nr]}"

					add_attribute 'Device node'
					add_values    "${cdrom_node[$drv_nr]}"

					add_attribute 'Capabilities'

					IFS_bak="$IFS"
					IFS=";"
					for cabty in ${cdrom_capabilities[$drv_nr]}; do
						add_values    "${cabty}\n "
						# debug with debug/lshw-dvdwriter
					done
					IFS="$IFS_bak"

					add_attribute 'Modes'
					add_values     "${cdrom_modes[$drv_nr]}"

					add_footer "cd_drive"

				fi
			done

		else
			info          "No cdrom drives detected"
		fi
	fi

	flush_values


	### media

	# root access is only required if the cdrom devices can't be accurately detected otherwise
	if [ $isverbose -ge 1 ] && [ $cdrom_count -ge 1 ] && \
		CheckReq_root "information of inserted media" && CheckReq "cdrecord" ; then

		media_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$media_tmp")

		local media_type media_material media_make media_subtype

		# scan all devices for inserted media
		for drv_nr in $(seq 1 1 $cdrom_count); do

			cdrecord dev="${cdrom_node[$drv_nr]}" -atip > $media_tmp 2>/dev/null

			# if the media is found
			if [ "$(grep 'info from disk' $media_tmp)" ]; then

				add_header "Media"
					extract_atip_data $media_tmp
					print_atip_data

			fi
		done

	fi

	flush_values

}


	# subfunctions #####
	#
	#
	# extract_cdrom_params
	#
	# Parameters
	#  1 tmpfile from lshw
	extract_cdrom_params() {

		tmpfile="${1}"
		#udevinfo -q all -n "${cdrom_node[$drv_nr]}" > ${udev_tmp}

		cdrom_model[$drv_nr]="$(extr_xml_value "$(grep -i product $tmpfile)")"

		cdrom_type[$drv_nr]="$(extr_xml_value "$(grep -i descr ${tmpfile})")"

		cdrom_serial[$drv_nr]="$(extr_xml_value "$(grep -i serial ${tmpfile})")"

		cdrom_node[$drv_nr]="$(extr_xml_value \
		                       "$(grep -i 'logicalname' ${tmpfile} | head -n 1)")"
		                       # sometimes there's a 'disc' node with a second
		                       # logicalname node, which is the same as the first

		cdrom_bus[$drv_nr]="$(extr_xml_value "$(grep -i businfo ${tmpfile})")"


		# extract capabilities
		IFS_bak="$IFS"
		IFS=$'\n'
		local cabty value
		for cabty in $(grep -i 'capability id' $tmpfile); do

			# verbosity level 0 only reports burning \ read \ playback capabilities
			value="$(extr_xml_value "$cabty")"
			if [ $isverbose -ge 1 ] || \
			   [ "$(grep -i 'burning\|read\ \|playback' <<< $value)" ]; then
			   cdrom_capabilities[$drv_nr]="$value;${cdrom_capabilities[$drv_nr]}"
			fi

		done
		IFS="$IFS_bak"

		# tmpfile is no longer needed, overwrite
		if [ $isverbose -ge 1 ]; then
			cdrecord dev="${cdrom_node[$drv_nr]}" -atip > $tmpfile 2>/dev/null
			cdrom_modes[$drv_nr]="$(grep -i 'supported modes' $tmpfile | \
			                        awk -F': ' {'print $2'})"

		fi

	}

	extract_atip_data() {

		tmpfile="${1}"

		media_type="$(grep -i 'disk type' $tmpfile | \
		              awk -F': ' {'print $2'})"

		media_make="$(grep -i 'manufacturer' $tmpfile | \
		              awk -F': ' {'print $2'})"

		# grep all atip lines that begin with a whitespace
		IFS_bak="$IFS"
		IFS=$'\n'
		local atip value
		for atip in $(grep -i '^atip info' -A 10 $tmpfile | grep '^[\ ]'); do

			media_atip="$media_atip;$atip"

		done
		IFS="$IFS_bak"

		media_booktype="$(grep -i 'book type' $tmpfile | \
		                  awk -F': ' {'print $2'})"

		media_copypr="$(grep -i 'copyr prot' $tmpfile | \
		                awk -F': ' {'print $2'})"

		media_layers="$(grep -i 'number of layers' $tmpfile | \
		                awk -F': ' {'print $2'})"



	}

	# print atip data, (manufacturer, physical media type etc..)
	print_atip_data() {

		add_attribute   "Media manufacturer"
		add_values      "$media_make"

		add_attribute   "Media type"
		add_values      "$media_type"

		add_attribute   "Media booktype"
		add_values      "$media_booktype"

		add_attribute   "Media copy protection"
		add_values      "$media_copypr"

		add_attribute   "Media layers"
		add_values      "$media_layers"


		IFS_bak="$IFS"
		IFS=";"
		add_attribute   "ATIP data"
		for atip in ${media_atip}; do
			add_values    "${atip}\n "
		done
		IFS="$IFS_bak"

	}
