################################################################################
################################################################################
## OSINFO MODULES                                                             ##
################################################################################
################################################################################

# modules can be freely added; the data processing and outputting is taken
# care of by other functions. these are accessed by the following functions,
# and here they are presented in the order in which they should appear in
# the modules.
#
# module_header	"Module name <string>"
#  each module should begin with this line.
#  it will be printed in colour at stdout and as a tag to xml.
#  it may contain spaces; in the xml tag they will be replaced by '_'
#
# add_header	"Header <string>" "Xml modifier <string> (optional)"
#  the argument is printed on a single line in bold to stdout,
#  and as a <header> tag to the xml, unless the modifier
#  is present. see add_header() for more information.
#  each module may contain several calls of this type.
#
# add_attribute "Common Name <string>"	"xml_code <string>"
#  the first argument is printed at the first field to stdout,
#  and the xml output is formulated as:
#  <xml_code>
#   <value>foo</value>
#  </xml_code>
#  each module may contain several calls of this type.
#  the previous attribute tag is automatically closed when a new
#  one is introduced.
#
# add_values "value 1 <any type>" "value 2" "value n"
#  several values can be given;
#  all of them will be separated with tab at stdout,
#  and they will each get their own <value>foo</value> line at xml output.
#  special characters as '\n' and '\t' can be used;
#  they will not affect the xml output.
#  each module may contain several calls of this type.
#
# add_footer "Footer <string>"
#  this call may follow a block of values, if the add_header
#  function is called before them. this closes open header tags.
#
# flush_values
#  prints the values to xml file or to stdout.
#  this should be the final command in a module.
#
#################################################################################

# these are used to control run access and validify against

MODULES_LINUX='system distro kernel processor memory hdd network wlan dmi applications terminal devices cdrom users services battery'
MODULES_BSD='system kernel applications terminal network devices dmi'
MODULES_BROKEN='printers lvm bus sensors nagios'
MODULES_REAL_ROOT_ONLY='system memory cdrom processor terminal applications network wlan devices services hdd printers dmi services bus battery'
MODULES_SU_ONLY='cdrom hdd dmi memory oem'
# MUST contain a list of all modules. This is used to find any invalid modules.
MODULES_ALL='applications cdrom devices distro dmi env hdd kernel memory network oem printers processor services system terminal users wlan lvm bus sensors nagios battery multimedia'


## META-MODULES
#
# can be also used as aliases on the command line,
# but not inside another meta-module

# AnMaster: I think this isn't very useful at all...
#           Also you need to get rid of eval if you plan to use it...
# ruxpin: this is a way to run mod_distro with mod_system, otherwise we'll have to
#         combine the two modules because the latter depends on the former.
#         this may well repeat later with other modules too. and besides a subset
#         of modules is useful, we may not fully realise it yet.
# TODO: make meta modules run the dependencies silent.

Meta_all='system distro kernel processor hdd applications network wlan terminal devices dmi cdrom memory users services'
Meta_lanforce='system processor memory network wlan dmi hdd devices cdrom users applications services env'
Meta_system='system kernel processor memory'
Meta_cpu='processor'
Meta_apps='applications'
Meta_net='network wlan'
MODULES_META='all lanforce system cpu apps net'


