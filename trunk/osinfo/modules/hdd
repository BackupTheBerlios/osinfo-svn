#!/bin/bash
#######################
# HARD DISK DRIVES
#
# this module collects data of the hard disk drives attached to the system.
# some information is unaccesible unless the partitions are mounted.
#
# S-ATA drives now display everything as nicely as IDE drives,
# due to support in recent smartmontools (version 5.36).
#
# used tools:
# fdisk, df, udev, /proc (deprecated), smartmontools, hdparm, bc
Module_hdd() {
	local moduleName="Hard drive configuration"
	local moduleDescription="Information of the hard drives in the system"
	module_header "${moduleName}"

	# development status:
	# -------------------
	# IDE/PATA is tested
	# SATA is tested
	# USB (flash sticks and hard drives) is tested
	# SCSI is untested, although works probably as SATA
	# Software RAID is planned (mdadm only), untested
	# Logical Volume Management support is preliminary
	# FreeBSD is untested


	# this module depends heavily on root access, so prevent other users
	# of running this module
	if CheckReq_root; then

		# declare variables
		local hdd_total_capacity=0 hdd_total_used=0 hdd_total_free=0 hdd_ID=0

		# allocate a temp file
		fdisk_info="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$fdisk_info")
		fdisk -l > $fdisk_info 2> /dev/null

		# detect all drives in the system
		local drives="$(grep -Eo '\/(dev)\/[a-z]+' ${fdisk_info} | uniq )"

		# collect and print data of all detected drives in this loop
		for drvdev in $drives; do
			((hdd_ID++))

			#########################
			# initialize variables
			#
			# $hdd_dev is the devfs/udev node, e.g. "/dev/hda"
			# $hdd_node is the device id, e.g. "hda"
			# $hdd_busnr is the drive bus number, e.g. for sdc '3' and hdd '4'

			hdd_dev[$hdd_ID]="${drvdev}"
			hdd_node[$hdd_ID]=$(echo $drvdev | awk -F/ {'print $NF'})
			# FIXME: useless use of echo?
			hdd_busnr[$hdd_ID]=$(( $(echo -n ${hdd_node[$hdd_ID]: -1:1} | \
				tr 'a-z' 'A-Z' | od -A n -t u1) - 64));
				# 64 is the offset of 'A' in the ASCII chart


			#################################
			# scan type-dependent attributes

			# IDE drives
			if [ "$(echo $drvdev | grep 'hd' )" ]; then

				# On FreeBSD the first ATA drive is 'ad0',
				# not tested!
				scan_hdd_ide ${drvdev} ${hdd_node[$hdd_ID]} ${hdd_busnr[$hdd_ID]}


			# SATA/SCSI/USB drives (Linux SCSI sg driver)
			elif [ "$(echo $drvdev | grep 'sd' )" ]; then

				# On FreeBSD the first ATA drive is 'da0',
				# hasn't been tested!
				scan_hdd_sata ${drvdev} ${hdd_node[$hdd_ID]} ${hdd_busnr[$hdd_ID]}


			# software RAID arrays
			elif  [ "$(echo $drvdev | grep md)" ]; then

				scan_hdd_raid ${drvdev} ${hdd_node[$hdd_ID]} ${hdd_busnr[$hdd_ID]}

			else

				hdd_type="unknown"

			fi


			###############################
			# scan common attributes
			[ "$hdd_type" != "unknown" ] && \
			scan_hdd_common ${drvdev}


			#####################
			# scan the partitions
			#
			# see the function code for comments on the variables
			# this functions sets. they will be overwritten during
			# the next run of this function. this would be easily
			# fixed if bash would support matrices, but no.
			hdd_pt_ID=0
			[ "$hdd_type" != "unknown" ] && \
			scan_hdd_partitions ${drvdev}


			##############################################
			# calculate the total disk capacity of $drvdev
			[ "$hdd_type" != "unknown" ] && \
			calculate_hdd_usage


			####################
			# OUTPUT DRIVE DATA
			print_hdd_data


			##################
			# clear varibles
			unset hdd_vendor hdd_model hdd_serial \
			      hdd_geometry hdd_dma hdd_driver hdd_type \
			      hdd_capacity_label hdd_capacity partitions_on_drive \
			      hdd_smart hdd_lifetime hdd_tempC hdd_health \
			      hdd_pt_node hdd_pt_mp hdd_pt_blocks hdd_pt_fs \
			      hdd_ata_standard hdd_pt_free hdd_startup

		done


		######################################
		# calculate total system disk capacity

		#totalpercfree=0

		#add_attribute "Total disk space"
		#add_values    "Capacity: $(echo $totalsize)"
		#add_values    "Free: $(echo -e $totalfree ; $totalpercfree %)"


		#DISKFREE=$(($DISKFREE+$partfree))
	fi

	flush_values
}

###### BEGIN HDD SUBFUNCTIONS #############
#
# these functions are called from mod_hdd and they generate no output,
# all data is stored into global variables.
# TODO: use array for these values, no need to unset then

	##############################################
	# PRINTS DRIVE DATA
	print_hdd_data() {
		# if the drive type is unknown, let's get it out of the way first..
		if [ "$hdd_type" == "unknown" ]; then

			add_header  "${drvdev}"
			add_attribute "Drive type"
			add_values    "unknown"
			add_footer

			break;
		fi
		
		case "$output_mode" in
			'stdout')	# standard output

				# HDD DEVICE NODE
				add_header  "\n${drvdev}"

				# HDD TYPE and model name
				add_attribute "$hdd_type"
				add_values  "$(echo $hdd_vendor $hdd_model | sed 's/^ *//')"

				# bus configuration; verbose
				if [ $isverbose -ge 1 ]; then
					add_attribute 'Bus configuration'
					# case by the last letter in $drvdev
					case ${drvdev: -1:1} in
						'a')
							add_values 'primary master'
							;;
						'b')
							add_values 'primary slave'
							;;
						'c')
							add_values 'secondary master'
							;;
						'd')
							add_values 'secondary slave'
							;;
						*)
							add_values 'unknown'
							;;
					esac
				fi


				# HDD REPORTED CAPACITY
				add_attribute 'Capacity (reported)'
				add_values  "$hdd_capacity_label"

				# verbose
				if [ $isverbose -ge 1 ]; then

					# HDD ACTUAL CAPACITY (verbose)
					add_attribute 'Capacity (actual)'
					add_values    "$(hdd_human_readable $hdd_capacity)"

					# SERIAL NUMBER
					add_attribute 'Serial number'
					add_values    "$hdd_serial"
				fi

				# DMA
				add_attribute 'DMA'
					# if DMA is off, print it in red
					if [ "$(grep -i off <<< $hdd_dma)" ]; then
						add_values  "${tcRED}$hdd_dma${tSTD}"
					elif [ "$(grep -i on <<< $hdd_dma)" ]; then
						#add_values  "$hdd_dma"
						add_values  "${tcGREEN}$hdd_dma${tSTD}"
					else
						add_values  "${tcRED}n/a${tSTD}"
					fi

				# ACTIVITY STATE; verbose
				if [ $isverbose -ge 1 ]; then
					add_attribute 'State'
					add_values "$hdd_state"
				fi

				# ATA standard; more verbose
				if [ $isverbose -ge 2 ]; then
					add_attribute   'ATA Standard'
					add_values      "$hdd_ata_standard"

					add_attribute 'Driver'
					add_values    "$hdd_driver"

					add_attribute 'Geometry'
					add_values    "$hdd_geometry"
				fi


				# SMART capability; more verbose
				if [ $isverbose -ge 2 ]; then
					# SMART capability
					add_attribute   'S.M.A.R.T.'
					add_values      "$hdd_smart"
				fi

				# S.M.A.R.T DATA
				# TODO: use add_subheader
				if [ "$(type -p smartctl)" ]; then

					# TEMPERATURE
					add_attribute   'Temperature'
					add_values  "$hdd_tempC"
						[ "$hdd_tempC" ]

					# verbose
					if [ $isverbose -ge 1 ]; then

						# LIFETIME
						add_attribute   'Lifetime'
						add_values      "$hdd_lifetime"

						# START-UP COUNT
						add_attribute   'Start-up count'
						add_values      "$hdd_startup"

						# HEALTH STATUS
						add_attribute   'Health Status'
						add_values      "$hdd_health"
					fi
				fi


				flush_values


				## PARTITION DATA
				add_header	'' # adds a space into stdout, does not affect xml
				add_nc_header	" Partition%col%mountpoint%col%blocks%col%free%col%filesystem\n"
				add_nc_header	" ---------%col%----------%col%------%col%----%col%----------"

				for hdd_pt in $(seq 1 1 $partitions_on_drive); do
					# print the device node
					add_attribute "  ${hdd_pt_node[$hdd_pt]}"

					# print info of mounted drives
					if [ "${hdd_pt_mp[$hdd_pt]}" ]; then #mount point exists

						# mount point
						add_values    "${hdd_pt_mp[$hdd_pt]}"

						# blocks
						add_values    "$(hdd_human_readable \
									   ${hdd_pt_blocks[$hdd_pt]})"
						# free
						if [ "${hdd_pt_free[$hdd_pt]}" != "" ]; then
						add_values    "$(hdd_human_readable \
									   ${hdd_pt_free[$hdd_pt]})"
						#add_values    "${hdd_pt_free_pc[$hdd_pt]})"
						else
							add_values '-'
						fi

						# fs type
						add_values    "${hdd_pt_fs[$hdd_pt]}"

					else

						# mount point
						add_values    " "

						# blocks
						add_values    "$(hdd_human_readable \
									   ${hdd_pt_blocks[$hdd_pt]})"

						# free would come here
						add_values    ' '

						# fs type
						add_values    "${hdd_pt_fs[$hdd_pt]}"

					fi

				done

				flush_values
				;;

			'xml')	# XML OUTPUT

				add_header    "drive"

					add_attribute "$hdd_type"			'hard_disk'
					# TODO: how to break these into many lines in the code?
					add_values    "$hdd_type $hdd_vendor $hdd_model ($hdd_serial) $hdd_capacity_label"

					if [ $lanforce -eq 1 ]; then
						add_attribute "partitions"		'drive'
					else
						add_header    "partitions"
					fi

					for hdd_pt in $(seq 1 1 $partitions_on_drive); do
						add_values    "${hdd_pt_node[$hdd_pt]} ${hdd_pt_mp[$hdd_pt]} ${hdd_pt_free[$hdd_pt]}/${hdd_pt_blocks[$hdd_pt]} ${hdd_pt_fs[$hdd_pt]}"
					done


					if [ $lanforce -eq 0 ]; then
						add_footer
					fi

				add_footer

				;;
		esac
	}


##############################################
# CALCULATES THE TOTAL DISK USAGE OF A DRIVE
	#
	# Sets variables:
	#  hdd_used[]           # total used space in kB
	#  hdd_free[]           # total free   - " -
	#  hdd_used_pc[]        # ratio of used/total capacity
	#  hdd_free_pc[]        # ratio of free/total capacity
	#  hdd_mnt_pc[]         # ratio of mounted/total disk capacity
	#  hdd_mnt_free_pc[]    # ratio of free/used on mounted
	#  hdd_mnt_used_pc[]    # ratio of used/free on mounted
	#  hdd_mnt_capacity[]   # total capacity in mounted partitions
	#
	calculate_hdd_usage() {
		local ID=$hdd_ID
		hdd_used[$ID]=0           # total used space in kB
		hdd_free[$ID]=0           # total free   - " -
		hdd_used_pc[$ID]=0        # ratio of used/total capacity
		hdd_free_pc[$ID]=0        # ratio of free/total capacity
		hdd_mnt_pc[$ID]=0         # ratio of mounted/total disk capacity
		hdd_mnt_free_pc[$ID]=0    # ratio of free/used on mounted
		hdd_mnt_used_pc[$ID]=0    # ratio of used/free on mounted
		[ ! "$partitions_on_drive" ] && scan_hdd_partitions
		[ ! "$hdd_capacity" ] && scan_hdd_common

		# calculate the total free space on all partitions
		# may be incorrect, since some partitions may be unmounted,
		# and swap if not counted in
		for hdd_pt in $(seq 1 1 $partitions_on_drive);do

			# if pt size is numbers (only)
			if [ "$(grep -Eo '[0-9]+' <<< ${hdd_pt_free[$hdd_pt]})" ]; then

				let hdd_used[$ID]+=hdd_pt_used[$hdd_pt]
				((hdd_free[$ID]+=hdd_pt_free[$hdd_pt]))

			fi
		done

		#echo "${hdd_free[$ID]}/${hdd_used[$ID]}/$hdd_capacity"

		# if the drive has mounted partitions
		if [ ${hdd_used[$ID]} -ne 0 ] && [ ${hdd_free[$ID]} -ne 0 ]; then

			# calculate the percentages of free and used space
			hdd_mnt_free_pc[$ID]="$(bc -s <<< scale=1\;" \
				"${hdd_free[$ID]}*100/${hdd_used[$ID]}) %"

			hdd_mnt_used_pc[$ID]="$(bc -s <<< scale=1\;" \
				"${hdd_used[$ID]}*100/${hdd_free[$ID]}) %"

			# calculate the ratio of mounted_capacity/total_capacity
			hdd_mnt_pc[$ID]="$(bc -s <<< scale=1\;" \
				"${hdd_free[$ID]}*100/${hdd_capacity})%"


			# the ratio of used and free/total capacity
			hdd_used_pc[$ID]="$(bc -s <<< scale=1\;" \
				"${hdd_used[$ID]}*100/${hdd_capacity})%"

			hdd_free_pc[$ID]="$(bc -s <<< scale=1\;" \
				"${hdd_free[$ID]}*100/${hdd_capacity})%"

		fi
	}


	#################################################
	# SCAN COMMON ATTRIBUTES OF ALL HARD DRIVE TYPES
	#
	# geometry and capacity
	#
	# Sets variables:
	#  hdd_geometry
	#  hdd_capacity_label	is the value given by the vendor
	#  hdd_capacity			is the true capacity of the drive
	#
	# Parameters:
	#  (1) drive device
	#
	scan_hdd_common() {
		local dev_scan="${1}"

		hdd_geometry="$(grep ${dev_scan} -A 1 ${fdisk_info} | sed -n "2{p;q;}")"

		# FIXME: couldn't this be simpler?
		hdd_capacity_label="$(grep ${dev_scan} ${fdisk_info}  | \
			head -n 1 | grep -Eo '[1-9][0-9]+[\.0-9]* \w{2}' | head -n 1)"

		# fdisk gives drive capacity in kB
		hdd_capacity="$(fdisk -s $dev_scan)"

		# get the activity state of the HDD
		hdd_state="$(hdparm -C $dev_scan | awk -F\: {'print $NF'})"
	}


	#########################
	# S.M.A.R.T. scanning
	#
	# smartmontools are handy in getting the extended parameters
	# of hard drives. only version 5.36 and onward support SATA drives
	# and the version may be a bit uncommon, as it was released in April 2006.
	# all major distros should begin to include it in their packages,
	# so this should be relatively common in late 2006.
	# for ide drives this is not a problem.
	#
	# Parameters:
	#  (1) drive device
	#  (2) device type (man smartctl for details)
	#
	scan_hdd_smart() {
		local dev_scan="${1}" dev_type smart_info version
		if [ "$2" ]; then
			dev_type="$2"
		else
			dev_type=ata
		fi

		CheckReq_smartctl # allocates temp file $smart_info
		# allocate a temp file
		smart_info="$(mktemp /tmp/osinfo.XXXXXX)"
		TempFiles=("${TempFiles[@]}" "$smart_info")

		smartctl -a -d $dev_type ${dev_scan} > $smart_info

		hdd_smart="$(grep 'SMART support' ${smart_info} | \
		             head -n 1 | awk -F': ' {'print $2'})"

		hdd_lifetime="$(grep -i power_on $smart_info | awk {'print $NF'})"

		hdd_startup="$(grep -i start_stop $smart_info | awk {'print $NF'})"

		# prefer hddtemp
		if [ "$(type -p hddtemp)" ]; then
			hdd_tempC="$(hddtemp $dev_scan | awk -F: {'print $NF'})"
		else
			hdd_tempC="$(grep -i temperature_celsius $smart_info | \
		             awk '{for (i=10; i<=NF; i++) printf("%s ",$i);printf ("\n")}')"
		fi

		hdd_health="$( grep -Ei '(health)+' $smart_info | awk {'print $NF'})"

		# ATA Standard
		hdd_ata_standard="$(grep -i '^ATA Standard' ${smart_info} | \
		                    awk -F: {'print $2'} | sed 's/^ *//') "
	}


	####################
	# PARTITIONS
	#
	# function extracts information of hard drive partitions and
	# stores it into arrays. the arrays are identified by the variable
	# hdd_pt_ID, which should be used to identify the parameters of the
	# partition in hdd_pt_node[hdd_pt_ID]. the arrays this function creates:
	#
	#  hdd_pt_ID         # this is an internal reference number
	#  hdd_pt_node[]     # partition devfs/udev node, e.g. "/dev/hda1"
	#  hdd_pt_blocks[]   # size of the partition in 1 kB blocks
	#  hdd_pt_capacity[] # capacity of the partition  - " -
	#  hdd_pt_used[]     # used space  - " -
	#  hdd_pt_free[]     # free space  - " -
	#  hdd_pt_used_pc[]  # used space in percentage, e.g. "84.5%"
	#  hdd_pt_free_pc[]  # free space in percentage
	#  hdd_pt_mp[]       # mount point
	#  hdd_pt_fs[]       # filesystem type
	#  hdd_pt_fs_size[]  # space allocated by the filesystem
	#
	# Parameters:
	#  (1) drive device
	#
	scan_hdd_partitions() {
		local dev_scan="${1}" part_free=0
		partitions_on_drive="$(grep ^${dev_scan} ${fdisk_info} | wc -l)"
		local ID=$hdd_pt_ID
		#local swap_color="${tcYELLOW}"
		# marking partitions in different colours would be great, but
		# the 'column' tool does not allow that. we should rewrite the
		# column function.

		#TODO for version 0.5 or so
		#hdd_fs_ID=[83] [7] [82] ... #which tells the FS type
		#hdd_fs_allocated=[1292372032] [28402202] [10284942]


		# loop all partitions detected by fdisk
		for PARTNR in $(seq 1 1 $partitions_on_drive); do

			((ID++)) # increase the array number

			# get the partition node
			hdd_pt_node[$ID]="$(grep ^${dev_scan} ${fdisk_info} | \
				awk {'print $1'} | sed -n "${PARTNR}{p;q;}" )"


			# get the partition size in 1 kB blocks
			hdd_pt_blocks[$ID]="$(fdisk -s ${hdd_pt_node[$ID]})"


			# detect the filesystem
			#
			# fdisk uses spaces, not tabs for indentation.
			# awk's $NF does not work, as the filesystem name may have spaces.
			# awk is looped from field 6 onward. while the field 6 is the
			# FS type integer, it has to be included when fdisk adds a '*'
			# character to denote bootable partitions. the numbers are removed
			# from the beginning of string with sed.
			hdd_pt_fs[$ID]="$(grep ^${hdd_pt_node[$ID]} ${fdisk_info} | \
			                  awk '{for (i=6; i<=NF; i++) printf("%s ",$i);printf ("\n")}' | \
			                  sed 's/^[0-9 ]*//')"


			# if partition is mounted (=is in mtab)
			#
			# FIXME: submounted (=system for automounting usb sticks) partitions
			# may be considered unmounted, while they are not!

			# the partition size is calculated from the value given by df,
			# and the float division is computed by bc.
			if [ "$(df -Plk | grep ${hdd_pt_node[$ID]})" ]; then

				# locate the mountpoint
				hdd_pt_mp[$ID]="$(df -PT ${hdd_pt_node[$ID]} | \
					grep ^${hdd_pt_node[$ID]} | awk {'print $NF'})"

				# get the partition capacity, used and free space in 1 kB blocks
				local df_output="$(df -Plk | grep ${hdd_pt_node[$ID]})"
				hdd_pt_capacity[$ID]="$(awk {'print $2'} <<< "$df_output")"
				hdd_pt_used[$ID]="$(awk {'print $3'} <<< "$df_output")"
				hdd_pt_free[$ID]="$(awk {'print $4'} <<< "$df_output")"
				hdd_pt_used_pc[$ID]="$(awk {'print $5'} <<< "$df_output")"

				# calculate the space allocated by the filesystem
				hdd_pt_fs_size[$ID]="$(bc -s <<< scale=1\;" \
					"${hdd_pt_free[$ID]}-${hdd_pt_capacity[$ID]})"

				# calculate the percentages of free and used space
				hdd_pt_free_pc[$ID]="$(bc -s <<< scale=1\;" \
					"${hdd_pt_free[$ID]}/${hdd_pt_capacity[$ID]}*100)%"

			else # unmounted

				# it might be swap..
				if [ "$(swapon -s | grep ${hdd_pt_node[$ID]})" ]; then
				# mark 'swap' as mountpoint for swap partitions, if they're in use
					#hdd_pt_mp[$ID]="${swap_color}swap${tSTD}"
					hdd_pt_mp[$ID]="swap"
					hdd_pt_used[$ID]="$(swapon -s | \
						grep ^${hdd_pt_node[$ID]} | awk {'print $4'})"

				else
					hdd_pt_mp[$ID]="-"
					hdd_pt_used[$ID]="n/a"
				fi

				# define the rest to empty values.
				hdd_pt_capacity[$ID]=""
				hdd_pt_free[$ID]=""
				hdd_pt_used_pc[$ID]=""
				hdd_pt_fs_size[$ID]=""

			fi

		done
	}


	#################
	# MAKES HDD SIZE REPORTS HUMAN-READABLE
	#
	# Parameters:
	#  (1) input value in kB
	#  (2) significant digits _after_ decimal, default 1
	#
	hdd_human_readable() {
		local value="${1}"

		# check if the input if proper
		if [ "$(grep [0-9] <<< $value)" ]; then

			if [ ! "$2" ]; then
				local digits=1
			else
				local digits="${2}"
			fi

			# dimension, 10^3 multiple of bytes, e.g. 'GB', defaults to MB
			case $(bc -s <<< ${value}/1024 | wc -m ) in
				'1'|'2'|'3'|'4')
					local dim='MB'
					local denominator="1024"
					;;
				'5'|'6'|'7')
					local dim='GB'
					local denominator='1024^2'
					;;
				'8'|'9'|'10')
					local dim='TB'
					local denominator="1024^3"
					;;
				'11'|'12'|'13')
					local dim='PB'
					local denominator="1024^4"
					;;
				*)
					local dim='kB'
					local denominator="1"
					;;
			esac

			local hdd_val="$(bc -s <<< scale=$digits\;${value}/${denominator}) $dim"

			# check if val<1
			if [ "${hdd_val:0:1}" == "." ]; then
				hdd_val="0${hdd_val}"
			fi

			echo "${hdd_val}"
		fi
	}


	#################
	# IDE drives
	#
	# this function collects information of IDE drives in the system
	#
	# udevinfo, /proc/ide/, smartmontools and hdparm are used as the data source.
	#
	# Parameters:
	#  (1) drive device
	#  (2) drive node in the /dev/ tree
	#  (3) the node number in the bus
	#
	scan_hdd_ide() {
		hdd_type='IDE drive'
		local dev_scan="${1}" dev_scannode="${2}"

		# detect the available data sources
		if [ "$(type -p udevinfo)" ]; then
			# allocate a temp file
			local udev_info="$(mktemp /tmp/osinfo.XXXXXX)"
			TempFiles=("${TempFiles[@]}" "$udev_info")
			udevinfo -q all -n ${dev_scan} > $udev_info
		fi
		if [ -e "/proc/ide/" ]; then
			local proc_info="/proc/ide/${dev_scannode}"
		fi
		# hdparm output is not read into a temp file, as
		# it is unlikely to be used, and that would unnecessarily
		# slow down this function.


		########
		# Vendor
		if [ "$(type -p smartctl)" ]; then

			# because smartctl uses its own database to report the HDD vendor,
			# it is preferred over udev.
			#
			# this smart scan is not included into the scan_hdd_smart()
			# because it would break the correct order of the report.
			hdd_vendor="$(smartctl -i ${dev_scan} | grep '^Model' | \
			              awk -F: {'print $2'} | sed 's/^ *//')"

		elif [ "${udev_info}" ]; then
			hdd_vendor="$(udevinfo -q all -n ${dev_scan} | grep -i vendor | \
			              awk -F_ {'print $NF'})"
		fi

		# check whether we got anything else than empty $vendor string
		if [  "$(grep  '^\ *' <<< $vendor )" ]; then
			hdd_vendor="Unknown vendor"
		fi


		#######
		# Model
		if  [ "${udev_info}" ]; then
			hdd_model="$(udevinfo -q all -n ${dev_scan} | grep -i model | \
			             awk -F= {'print $NF'})"

		elif [ -e "${proc_info}" ]; then
			hdd_model="$(cat ${proc_info}/model)"

		elif [ "$(type -p hdparm)" ]; then
			hdd_model="$(hdparm -i ${dev_scan} | grep -Eio 'Model=\w+' | \
			             awk -F= {'print $2'})"

		fi


		###############
		# Serial number
		if  [ "${udev_info}" ]; then
			hdd_serial="$(grep SERIAL ${udev_info} | awk -F= {'print $NF'})"

		elif [ "$(type -p hdparm)" ]; then
			hdd_serial="$(hdparm -i ${dev_scan} | grep -Eio 'serialno=\w+' | \
			              awk -F= {'print $2'})"
		fi


		########
		# Driver
		if [ -e "/proc/ide/${dev_scannode}" ]; then
			hdd_driver="$(cat ${proc_info}/driver)"
		fi


		############
		# DMA STATUS
		if [ "$(type -p hdparm)" ]; then
			hdd_dma="$(hdparm ${dev_scan} | grep dma | grep -Eo '\([onf]+\)' | \
			           sed 's/(\|)//g')"
		fi


		#############################
		# scan for SMART attributes
		if [ "$(type -p smartctl)" ]; then
			scan_hdd_smart ${dev_scan} ata
		fi
	}


	#################
	# SATA/SCSI/USB drives (sg driver)
	#
	# this function collects information of SATA/SCSI/USB drives,
	# because under Linux they all use the same SCSI drivers.
	#
	# the information in stored into two or three locations, depending
	# on the kernel and whether the system uses devfs or udev.
	# since devfs is deprecated, it is not used at all.
	# the /proc/scsi/ system is deprecated from 2.6 on, but it is left
	# here for legacy support.
	#
	# usb drives, when properly detected by the Linux kernel,
	# are added to /proc/scsi/scsi info sheet, and the assigned scsi number
	# which can be found both in the beforementioned location and also
	# in /proc/scsi/sg/devices, can be used to identify the device
	# in /proc/scsi/usb-storage/*.
	#
	# as the devices are (hopefully) linearily, the devices catalogue
	# can be used to identify which /dev/sd* node is a certain scsi#.
	#
	# this is not true in the case of custom udev rules. although
	# a good practise is to let kernel do its magic and create a
	# link node to that device, so this is unlikely to be a problem.
	#
	# smartmontools support SATA drives from version 5.36 on
	# (released April 2006). this function is written in June 2006,
	# and for that the version of smartctl is checked before trying
	# to access SATA drives.
	#
	# Parameters:
	#  (1) drive device
	#  (2) drive node in the /dev/ tree
	#  (3) the node number in the bus
	#
	scan_hdd_sata() {
		local dev_scan="${1}" dev_scannode="${2}" dev_nodenr="${3}"

		# detect the available data sources
		if [ "$(type -p udevinfo)" ]; then
			# allocate a temp file
			local udev_info="$(mktemp /tmp/osinfo.XXXXXX)"
			TempFiles=("${TempFiles[@]}" "$udev_info")
			udevinfo -q all -n ${dev_scan} > ${udev_info}
		fi

		if CheckReq_smartctl; then
			# allocate a temp file
			smart_sata="$(mktemp /tmp/osinfo.XXXXXX)"
			TempFiles=("${TempFiles[@]}" "$smart_sata")
			smartctl -a -d ata ${dev_scan} > $smart_sata
		fi

		# NOTE:
		# hdparm output is not read into a temp file, as
		# it is unlikely to be used, and that would unnecessarily
		# slow down this function.

		# scan the (deprecated) /proc/scsi bus for information
		if [ -e "/proc/scsi/" ]; then
			local procfile scsi_info scsi_devices scsi_nr \
			      scsi_devstrings usb_devstrings sg_version

			procfile="/proc/scsi/scsi"
			[ -e $procfile ] && proc_info=$procfile

			procfile="/proc/scsi/sg/devices"
			[ -e $procfile ] && scsi_devices=$procfile && \
			                    scsi_nr="$(sed -n "$dev_nodenr{p;q;}" \
			                    ${scsi_devices} | awk {'print $1'})"

			procfile="/proc/scsi/sg/device_strs"
			[ -e $procfile ] && scsi_devstrings=$procfile

			procfile="/proc/scsi/usb-storage/"
			[ -e $procfile ] && usb_devstrings=$procfile

			procfile="/proc/scsi/sg/version"
			[ -e $procfile ] && sg_version=$procfile
		fi


		if [ "${udev_info}" ]; then

			local bus="$(grep -i ID_BUS ${udev_info} | awk -F= {'print $NF'})"
			if [ "$(grep usb <<< $bus)" ]; then		# USB drive detected

				hdd_type='USB drive'

			else
				hdd_type='SATA/SCSI drive'
			fi

		# test if the scsi_nr is found in /proc/scsi/usb-storage/
		elif [ -e "${proc_info}" ]; then

			if [ -e "${usb_devstrings}${scsi_nr}" ]; then
				local usb_info="${usb_devstrings}/${scsi_nr}"
				hdd_type='USB drive'
			fi

		else	# no udev and no /proc/scsi. odd.

			hdd_type='SATA/SCSI drive'

		fi

		########
		# Vendor
		if [ $smart_sata ]; then

			# because smartctl uses its own database to report the HDD vendor,
			# it is preferred over udev.
			#
			# this smart scan is not included into the scan_hdd_smart()
			# because it would break the correct order of the report.

			hdd_vendor="$(grep '^Model' "$smart_sata" | \
			              awk -F: {'print $2'} | sed 's/^ *//') "

		elif [ "${udev_info}" ]; then

			hdd_vendor="$(grep -i vendor ${udev_info}  | \
			              awk -F= {'print $NF'}) "

		elif [ -e "${proc_info}" ]; then

			hdd_vendor="$(sed -n "$dev_nodenr{p;q;}" "${scsi_devstrings}" | \
			              awk {'print $1'}) "
			              #"$(grep -i vendor ${usb_info} | awk -F': ' {'print $2'})"
		fi


		#######
		# Model
		if  [ "${udev_info}" ]; then

			hdd_model="$(grep -i model ${udev_info} | \
			             awk -F= {'print $NF'})"

		elif [ -e "${proc_info}" ]; then

			hdd_model="$(sed -n "$dev_nodenr{p;q;}" "${scsi_devstrings}" | \
			             awk {'print $2" "$3'})"

		elif [ "$(type -p hdparm)" ]; then

			hdd_model="$(hdparm -i ${dev_scan} | grep -Eio 'Model=\w+' | \
			             awk -F= {'print $2'})"
		fi


		###############
		# Serial number

		# prefer smartmontools
		if [ $smart_sata ]; then

			hdd_serial="$(grep '^Serial' ${smart_sata} | \
			              awk -F: {'print $2'} | sed 's/^ *//') "

		elif  [ "${udev_info}" ]; then

			hdd_serial="$(grep SERIAL ${udev_info} | awk -F= {'print $NF'})"

		elif [ "$(type -p hdparm)" ]; then

			hdd_serial="$(hdparm -i ${dev_scan} | grep -Eio 'serialno=\w+' | \
			              awk -F= {'print $2'})"
		fi


		########
		# Driver
		if [ -e "${proc_info}" ]; then
			hdd_driver="Linux SCSI Generic (sg) v. ${sg_version}"
		fi


		#TODO: dma status


		###########
		# scan for SMART attributes
		if [ $smart_sata ]; then scan_hdd_smart ${dev_scan} ata; fi
	}


	#######################
	# SOFTWARE RAID ARRAYS
	#
	scan_hdd_raid() {
		info	"todo"
	}
	###### END OF HDD SUBFUNCTIONS #############

