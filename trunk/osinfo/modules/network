##########
# NETWORK
#
# this module detects the network settings of the computer.
#
# there are at least two methods to pull in information; ifconfig and iproute2.
# ifconfig is used; there are at least two versions of ifconfig being used, and
# all tested Linuxes have used the same, whereas FreeBSD v6 had different
# output. the script should work on both versions.
#
# some changes have been made after testing with FreeBSD, so compitibility
# may not be 100% anymore.
Module_network() {
	local moduleName="Network information"
	module_header	"${moduleName}"

	local specials="UP|BROADCAST|LOOPBACK|NOARP|NOTRAILERS|RUNNING|MULTICAST"
	local nwfile

	# allocate a temp file
	local nw_info="$(mktemp /tmp/osinfo.XXXXXX)"
	local iw_info="$(mktemp /tmp/osinfo.XXXXXX)"
	TempFiles=("${TempFiles[@]}" "$nw_info" "$iw_info")

	################################
	# DETECT (WIRED) NETWORK DEVICES
	# using ifconfig
	#
	# detect the type of OS. all ifconfigs in tested Linuxes operate
	# more of less similarity, but the one on FreeBSD 6.0 is different.
	if [ "$(type -p ifconfig)" ]; then
		nw_src="ifconfig"
		
		# Can we run ifconfig?
		if [ -x "$(type -p ifconfig)" ]; then
		
			if [ "$SYSTEM" == "linux" ] ; then
				ETH_DEVICES="$(ifconfig -a | grep BROADCAST -B 3 | \
				grep -Ev '(^ )|(^--)|LOOPBACK' | awk  {'print $1'})"

			else # *BSD ifconfig
				ETH_DEVICES="$(ifconfig -a | grep BROADCAST | grep -v LOOPBACK | \
				awk -F': ' {'print $1'})"
			fi
		else
			CheckReq_root
		fi
	fi

	print_network_information

	flush_values
}

	print_network_information() {
		### generic information
		add_header  "$(get_hostname)" 'computer name'

			add_attribute 'NIS domain'
			add_values    "$(get_nis_domain)"

			add_attribute 'DNS domain'	'domain'
			add_values    "$(get_dns_domain)"

			add_attribute 'FQDN'		"fully_qualified_domain_name"
			add_values    "$(get_fqdn)"

			local ipv4 ipv6

			# collect the information from detected network devices
			for interface_name in $ETH_DEVICES; do
				ifconfig $interface_name > ${nw_info} 2>/dev/null
				iwconfig $interface_name > ${iw_info} 2>/dev/null

				add_header    $interface_name   'iface name'

				add_attribute 'Device'
				add_values    "$(get_device_name ${nw_info} ${iw_info})"

				add_attribute 'MAC'		"mac_address"
				add_values    "$(grep -Eo '([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}' ${nw_info})"

				add_attribute 'IPv4'		"ip_address"
				add_values    "$(get_ipv4 ${nw_info})"

				add_attribute 'IPv6'
				add_values    "$(get_ipv6 ${nw_info})"

				add_attribute 'IP type'	"ip_type"
				add_values    "$(detect_ip_type)"

				add_attribute 'Gateway'	"default_gateway"
				add_values    "$(route -n | grep $interface_name | \
				                 awk '/^0.0.0.0/{print $2}')"

				add_attribute 'Broadcast'
				add_values    "$(sed "s/  /\n/g" ${nw_info} | \
				                 grep -Eio 'cast[A-Za-z: ]*([0-9]{1,3}\.){3}[0-9]{1,3}' | \
				                 grep -Eo '[0-9\.]+' )"

				add_attribute 'Netmask'	"subnet_mask"
				add_values    "$(sed "s/  /\n/g" ${nw_info} | \
				                 grep -Eio 'mask[A-Za-z: ]*((([0-9]{1,3}\.){3}[0-9]{1,3})|(0x[0-f]{8}))' | \
				                 grep -Eo '[0-9\.fx]+' )"

				# wireless extensions
				if [ -s ${iw_info} ] ; then
					# this is only available for root
					add_attribute 'Encryption key'
					add_values    "$(get_enckey ${iw_info})"
				fi

				# verbose
				if [ $isverbose -ge 1 ]; then
					add_attribute 'RX bytes'
					add_values    "$(sed "s/  /\n/g" ${nw_info} | \
									 grep -i 'RX bytes' | awk -F: {'print $2'})"

					add_attribute 'TX bytes'
					add_values    "$(sed "s/  /\n/g" ${nw_info} | \
									 grep -i 'TX bytes' | awk -F: {'print $2'})"
				fi

				add_footer    "iface"
			done
		add_footer    'computer'
	}


	function get_hostname() {
		# hostname produces stderr if no network is available
		hostname 2> /dev/null
		}

	function get_nis_domain() {
		hostname -y 2> /dev/null
		}

	function get_dns_domain() {
		hostname -d 2> /dev/null
		}

	function get_fqdn() {
		hostname -f 2> /dev/null
		}

	function get_ipv4() {
		# parameters:
		#  1  output of ifconfig (file)
		grep -Eio 'inet[A-Za-z: ]*([0-9]{1,3}\.){3}[0-9]{1,3}' ${1} | \
	        grep -Eo '[0-9\.]+'
		}

	function get_ipv6() {
		# parameters:
		#  1  output of ifconfig (file)
		sed "s/  /\n/g" ${1} | grep -i inet6 | \
	        grep -Eio '([0-9a-f]{3,4}(\:){1,2}){4,8}([0-9a-f]{3,4})'
		}

	function get_enckey() {
		# parameters:
		#  1  output of iwconfig (file)
		grep -Eoi 'encryption key:[0-9A-Z\-]*' ${1} | awk -F\: {'print $2'}
	}

	function get_mac_address() {
		# debug only!
		/sbin/ifconfig eth0 | grep -Eo '([0-9A-Fa-f]{2}:){5}[0-9A-Fa-f]{2}'
		}

	function get_device_name() {
		# parameters:
		#  1  output of ifconfig (file)
		#  2  output of iwconfig (file)

		# detect IRQ from ifconfig and compare it to lspci
		local irq="$(grep -o 'Interrupt[[:punct:]][0-9]*' "${1}" | \
			grep -Eo '[0-9]+' )"

		# if the device has an IRQ
		if [ "$irq" ]; then
			lspci -vvv | grep -i 'network\|ethernet' -A 7 | \
			grep "IRQ $irq" -B 5 | grep -i 'network\|ethernet' | \
			awk -F: {'print $NF'}

		# otherwise it could be PCMCIA or USB device
		# check iwconfig
		else
			grep ${interface_name} ${2} | awk {'print $2'}
		fi
		}

	function get_device_flags() {
		# parameters:
		#  1  device node
		echo foo
		}

	### network helper functions
	##
	# detects the ip type (static or dynamic) based on some common
	# configuration files. works on Debian, Ubuntu and Gentoo.
	function detect_ip_type () {
			local nw_conf_files="/etc/network/interfaces
			                     /etc/conf.d/net"
			for nwfile in $nw_conf_files; do
				if [ -e $nwfile ]; then

					# grep for the word 'dhcp' and the iface name in the config file
					if [ "$(grep -v ^# ${nwfile} | grep $interface_name | grep -i dhcp)" ]; then
						echo    'DHCP'

					# grep for the word 'static' or the ip address and the iface
					elif [ "$(grep -v ^# ${nwfile} | grep $interface_name | \
					          grep -i "static\|$ipv4\|$ipv6")" ]; then
						echo    'static'

					else # give up
						echo    ''
					fi
				fi
			done
	}
	############################

