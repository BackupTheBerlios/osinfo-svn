#!/bin/bash
#######################
# APPLICATIONS
#
# version information of standard *nix, dev, and dependency packages.
# probably should take an additional switch like --X, --server, etc.
Module_applications() {
	local moduleName="Applications"
	module_header "${moduleName}"

	local APPLICATIONS app versionstring category cat_print=0
	local missing_ERRMSG="if you want to be able to use all modules of ${appname}"


	## Define the applications to look for
	if [ "$SYSTEM" == "linux" ] ; then

		APPLICATIONS="Graphical_interface: X kde-config gnome-about xfce4-session \
		              fluxbox fvwm2 enlightenment \
			Shells: bash csh dsh fish pdsh rrs tcsh zsh \
			Compilers: gcc gcj icc \
			System: udevinfo \
			Userspace_tools: make unsermake awk sed grep ls gzip lspci lshw dmidecode smartctl hdparm \
			Languages: perl python java-config ruby php \
			Servers: apache2 mysql ssh smbd cups-config \
			Miscellaneous: x11vnc Xvnc nagios firefox thunderbird mozilla cdrecord"

		UNTESTED="Graphical_interface: \
			Compilers: ccc cxx cfal erlang fpc gforth ghc gnat \
			           gnat-gcc gnat-gpl gpc icc ifc open-cobol \
			Tools: mono"

			# Shells: ash ccsh dash esh ksh mksh psh rssh sash shish
			# don't take any version parameters


	elif [ "$(grep -i bsd <<< "$SYSTEM")" ]; then

		APPLICATIONS="Graphical_interface: X kde-config gnome-about \
			Shells: bash csh dsh fish pdsh rrs tcsh zsh \
			Compilers: gcc gcj icc \
			Tools: awk grep gzip lshw dmidecode lspci lshw smartctl hdparm \
			Languages: perl python java-config ruby php \
			Servers: apache2 mysql ssh smbd cups-config \
			Miscellaneous: x11vnc"

	fi


	## Write the header for output
	if [ $usexml -eq 1 ]; then
		add_attribute "Applications" 'software'
	fi


	## Process all categories
	for app in $APPLICATIONS; do
		# if the variable $app is a category definition,
		if [ $(grep \: <<< $app) ] && [ $usexml -eq 0 ]; then

			category="$(sed 's/\:// ; s/_/\ /g' <<< $app)"

			# check verbosity level, do not print shells
			# if verbosity is less than 1
			if [ $isverbose -lt 1 ] && [ "$category" == "Shells" ]; then
				cat_print=0
			else
				# print the category to stdout
				cat_print=1
				add_header "$category"
			fi

			flush_values

		# use the subfunction to get the version information
		elif [ "$(type -p $app)" ] && [ $cat_print -eq 1 ]; then # it is installed
			versionstring="$(get_version $app)"
			# if the application doesn't tell what it is, echo it
			if [ "$(grep -i ${app} <<< ${versionstring})" ]; then
				add_values	"\t${versionstring}\n"
			else
				add_values	"\t${versionstring} ($app)\n"
			fi
		fi
	done

	flush_values
}

	###########################################
	# helper functions for applications module
	get_version() {
		local app="${1}"
		case "$app" in
			'perl')
				echo  "Perl" $($app --version 2>&1 | grep 'perl, v' | \
							   grep -Eo 'v[ A-Za-z0-9.-]*')
				;;
			'python')
				python -V 2>&1 | head -n 1
				;;
			'X')
				X -version 2>&1 | grep Revision
				;;
			'kde-config')
				kde-config -version 2>&1 | grep KDE
				;;
			'gnome-about')
				gnome-about --version 2>&1 | sed 's/gnome-about//'
				;;
			'xfce4-session')
				xfce4-session --version | head -n 1 | sed 's/xfce4-session/Xfce4/'
				;;
			'fluxbox')
				fluxbox -version 2> /dev/null | head -n 1
				;;
			'apache2'|'apache')
				$app -V | head -n 1 | awk -F': ' {'print $2'}
				;;
			'cups-config')
				echo  "Cups $($app --version 2>&1 )"
				;;
			'smbd')
				echo  "Samba $($app -V 2>&1 )"
				;;
			'udevinfo')
				$app -V 2>&1
				;;
			'awk')
				# awk is a bit tricky.. it can go into a captive cmd interpreter mode
				if [ ! "$(awk -V 2> /dev/null)" ]; then
					awk -W version 2>&1 | head -n 1
				else
					awk -V
				fi
				;;
			'dmidecode')
				echo  "dmidecode $(dmidecode -V 2> /dev/null )"
				;;
			'java-config')
				echo "Java $(java-config -f)"
				;;
			'ssh')
				ssh -V 2>&1 /dev/null
				;;
			'icc')
				icc 2>&1 -V | head -n 1
				;;
			'ls')
				ls --version | head -n 1 | sed 's/ls// ; s#(\|)\|^\ ##g'
				;;
			'pdsh')
				pdsh -V | head -n 1
				;;
			'firefox')
				firefox --version 2>/dev/null | head -n 1
				;;
			'Xvnc')
				Xvnc -version 2>&1
				;;
			*)
				$app --version 2>&1 | grep '\w' | head -n 1
				;;
			'lspci')
				info "please install pciutils ${missing_ERRMSG}"
				Missing=("${Missing[@]}" "lspci" )
				;;
			'lshw')
				info "please install lshw ${missing_ERRMSG}"
				Missing=("${Missing[@]}" "lshw" )
				;;
			'smartctl')
				info "please install smartmontools ${missing_ERRMSG}"
				Missing=("${Missing[@]}" "smartmontools" )
				;;
			'dmidecode')
				info "please install dmidecode ${missing_ERRMSG}"
				Missing=("${Missing[@]}" "dmidecode" )
				;;
		esac
	}
	###########################################

