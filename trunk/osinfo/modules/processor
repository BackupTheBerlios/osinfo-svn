############################################
# CPU
#
# uses /proc/cpuinfo (Linux only)
# and x86info (if available)
Module_processor() {
	local moduleName="Processor"
	module_header "${moduleName}"

	local cpunr cpuinfo cpu_count

	define_cpuinfo

	if [ "$cpuinfo" ]; then

		# test if /proc/cpuinfo gives a number for cpu cores.
		# if not, the kernel probably lacks SMP support so assume 1 cpu.
		# this is a problem with Pentium 4 Hyperthreading cpus, which kernel
		# treats like two processors.
		# double cores not tested yet.
		if [ ! "$(grep core $cpuinfo)" ]; then
			cpu_count=1
		else
			cpu_count="$(grep 'processor' ${cpuinfo} | wc -l)"
		fi

		if [ "$lanforce" == 1 ]; then
			add_attribute "CPU Count"      "processor_count"
			add_values    $cpu_count
		fi

		for cpunr in $(seq 1 1 $cpu_count); do
			[ $cpu_count -gt 1 ] && add_header	"CPU  $cpunr"

			add_attribute "CPU Vendor"      "processor_vendor"
			add_values        "$(grep 'vendor' ${cpuinfo} | sed -n "$cpunr{p;q;}" | \
			                     awk -F': ' {'print $2'})"

			add_attribute "CPU Model"       "processor_model"
			add_values        "$(get_cpu_model)"

			add_attribute "CPU Frequency"   "processor_speed"
			add_values        "$(grep 'cpu MHz' ${cpuinfo} | sed -n "$cpunr{p;q;}" | \
			                     awk -F': ' {'print $2'})"
			add_value_footer  "MHz"


			if [ $isverbose -ge 1 ]; then

				add_attribute "CPU Architecture"	"system_type"
				add_values        "$(uname -m)"

				# temperature and voltage info
				if CheckReq_sensors; then
					scan_cpu_temp
					scan_cpu_fan
					scan_cpu_voltage
				fi

				add_attribute "CPU Cache"
						local cache_size="$(grep 'cache' ${cpuinfo} | sed -n "$cpunr{p;q;}" )"
						add_values       "$(grep -Eo '[0-9]+' <<< $cache_size)"
						add_value_footer "$(awk {'print $NF'} <<< $cache_size)"

				local stepping="$(grep 'stepping' ${cpuinfo} | sed -n "$cpunr{p;q;}" | \
				                  awk -F': ' {'print $2'})"

				if [ $stepping -gt 1 ]; then
					add_attribute "CPU Stepping"
					add_values        "$(grep 'stepping' ${cpuinfo} | sed -n "$cpunr{p;q;}" | \
					                     awk -F': ' {'print $2'})"
				fi

				if	CheckReq_lshw && CheckReq_root "more information" ; then

					local cpu_width

					lshw_xml
					cpu_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
					TempFiles=("${TempFiles[@]}" "$cpu_tmp" )

					extr_node "node id=\"cpu" $lshw_xml_file /node > $cpu_tmp

					# extract capabilities
					IFS_bak="$IFS"
					IFS=$'\n'
					local cabty value
					for cabty in $(grep -i 'capability id' $cpu_tmp); do

						value="$(extr_xml_value "$cabty")"
						if [ $isverbose -ge 1 ] || \
						   [ "$(grep -i 'burning\|read\ \|playback' <<< $value)" ]; then
							cpu_capabilities[$cpunr]="$value;${cpu_capabilities[$cpunr]}"
						fi

					done
					IFS="$IFS_bak"

					add_attribute 'Capabilities'

						IFS_bak="$IFS"
						IFS=";"
						for cabty in ${cpu_capabilities[$cpunr]}; do
							add_values    "${cabty}\n "
						done
						IFS="$IFS_bak"



					#set -x
					# TODO: place the proper 'sed' here vv
					#cpu_width="$(grep width ${cpu_tmp} | head -n 1 | sed ...)"
					#cpu_width_dimension ; grep units....
					#set +x

					#clock

				fi
			fi

			[ $cpu_count -gt 1 ] &&	add_footer
		done
	else
		info "Cpu info could not be found"
	fi

	flush_values
	}

	# CPU subfunctions

	get_cpu_model() {
		[ ! "$cpuinfo" ] && define_cpuinfo

		if [ "$cpuinfo" ]; then
			grep 'model name' ${cpuinfo} | \
				sed -n "$cpunr{p;q;}" | awk -F': ' {'print $2'}
		fi
		}

	define_cpuinfo() {
		[ "$(grep -i linux <<< $SYSTEM)" ] && cpuinfo="/proc/cpuinfo"
		}

############################################

