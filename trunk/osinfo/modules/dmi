#######################
# DMI / OEM INFORMATION
#
# NOTE: the structure is under construction!

#
# this module uses dmidecode to read BIOS information of OEM info.
# look below for excerpt from 'man dmidecode':
#
# dmidecode  is  a  tool  for dumping a computer's DMI (some say SMBIOS) table
# contents in a human-readable format.
# This table contains a description of the system's hardware components,
# as well as other useful pieces of information  such  as  serial
# numbers and BIOS revision. Thanks to this table, you can retrieve this
# information without having to probe for the actual hardware.  While this
# is a good point in terms of report speed and safeness,  this also makes
# the presented information possibly unreliable.
#
#		# the interesting handles:
		# 0x0000 or 0x0001 = 'BIOS Information'
		# 0x0001 or 0x0002 = 'System Information'
		# 0x0002 or 0x0003 = 'Base Board Information'
		# 0x0003 or 0x0004 = 'Chassis Information'
		# 0x0004 or 0x0005 = 'Processor Information'
		# .... and more

Module_dmi() {
	local moduleName="DMI information"
	module_header "${moduleName}"

	if CheckReq_dmidecode && CheckReq_root; then

		print_bios_info
		print_oem_info
		print_mobo_dmi
		print_chassis_info

	fi

	flush_values
}

##########################
## dmi helper functions
#
# remember to run "dmi_info" before attempting to use these functions!

	extract_dmi() {
		# load dmi temp file
		dmi_info

		# IFS need to be changed because the values are separated by newline
		local IFS_bak="$IFS" value
		IFS=$','
		
		# extract the handle and string the first line
		# (%node% identifier that is useless here)
		extr_node ${handle_desc} ${dmi_tmp_file} Handle | \
			sed -n "2,\${p;}" > ${osinfo_tmp}

		# because sometimes there's some extra info, head -n 5
		# TODO: combine grep and sed
		local handleID="$(head -n 5 ${osinfo_tmp} | grep -i ${handle_desc} | \
			sed 's/^[^a-zA-Z]//')"

		IFS="$IFS_bak"
	}


	print_bios_info(){
Ã‚		local handle_desc='BIOS Information'

		# extract the handle to a temp file
		extract_dmi ${handle_desc} > ${osinfo_tmp}

		add_header    "BIOS"

		add_attribute 'Vendor'
		add_values    "$(grep -i vendor ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Revision'	'bios_version'
		add_values    "$(get_bios_revision)"
	

		add_attribute 'Date'	'bios_date'
		add_values    "$(grep -i date ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Serial number'	'bios_serial_number'
		add_values    "$(grep -i serial ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"

		add_footer
	}


	print_oem_info(){
		local handle_desc='System Information'

		# extract the handle to a temp file
		extract_dmi ${handle_desc} > ${osinfo_tmp}
	
		add_header  "System info"

		add_attribute 'Manufacturer' \
					  'system_manufacturer'
		add_values    "$(grep -i manufacturer ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Model'	'system_model'
		add_values    "$(grep -i product ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Version number'
		add_values    "$(grep -i version ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'OEM serial number' \
					  'computer_product_serial'
		add_values    "$(grep -i serial ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'UUID' 	'uuid'
		add_values    "$(grep -i uuid ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"

		add_footer
	}


	print_mobo_dmi(){
		local handle_desc='Base Board information'

		# extract the handle to a temp file
		extract_dmi ${handle_desc} > ${osinfo_tmp}

		add_header    "Motherboard"

		add_attribute 'Manufacturer' \
					  'mother_board_manufacturer'
		add_values    "$(get_mobo_manufacturer)"
		
		
		add_attribute 'Model' \
					  'mother_board_model'
		add_values    "$(get_mobo_model)"
	
		
		add_attribute 'Version' \
					  'mother_board_version'
		add_values    "$(grep -i version ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Serial number' \
					  'mother_board_serial_number'
		add_values    "$(grep -i serial ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"

		add_footer	
	}


	print_chassis_info(){
		local handle_desc='Chassis Information'

		# extract the handle to a temp file
		extract_dmi ${handle_desc} > ${osinfo_tmp}

		add_header    'Chassis'

		add_attribute 'Manufacturer' 	'chassis_manufacturer'
		add_values    "$(grep -i manufacturer ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Type' 	'chassis_type'
		add_values    "$(grep -i type ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Version' 	'chassis_version'
		add_values    "$(grep -i version ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Serial number' \
					  'chassis_serial_number'
		add_values    "$(grep -i serial ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"


		add_attribute 'Lock' 	'chassis_lock'
		add_values    "$(grep -i lock ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"

		add_attribute 'Asset tag' 'chassis_asset_tag'
		add_values    "$(grep -i asset ${osinfo_tmp} | \
						 awk -F':' {'print $2'} | \
						 sed 's/^\ *//')"

		add_footer	
	}

		get_mobo_manufacturer() {
			grep -i manufacturer ${osinfo_tmp} | \
			awk -F':' {'print $2'} | sed 's/^\ *//'
		}

		get_mobo_model() {
			grep -i product ${osinfo_tmp} | \
			 awk -F':' {'print $2'} | sed 's/^\ *//'
		}

		get_bios_revision() {
			grep -i version ${osinfo_tmp} | \
		    awk -F':' {'print $2'} | sed 's/^\ *//'
		}
