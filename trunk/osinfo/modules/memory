#######################
# MEMORY
#
# this module tells complete information of the memory
# installed and used on the system.
# THE MODULE IS STILL VERY INCOMPLETE!
#
# lshw is used for RAM size evaluation. the size is reported by BIOS
# and is the most accurate way to detect the physical system memory.
# 'free' and '/proc/meminfo' would also report free RAM, but slightly 
# incorrectly, since they only detect total ram after kernel allocation.
#
# TODO: add support for memory type/speed detection thru lshw
# TODO: memory usage
Module_memory() {
	local moduleName="System memory"
	module_header "${moduleName}"

	print_physical_ram_info

	# meminfo="/proc/meminfo"

	add_attribute     'Available RAM'
	add_values        "$(get_available_ram)"

	if [ $isdebug -ge 1 ]; then
		print_total_usage
	fi


	flush_values
}

	function print_physical_ram_info() {

		if CheckReq lshw; then

			# reserve a temp file
			mem_tmp="$(mktemp /tmp/osinfo.XXXXXX)"
			TempFiles=("${TempFiles[@]}" "$mem_tmp" )

			extr_lshw_node memory > $mem_tmp


			# PRINT

			add_attribute     'Physical RAM'	'ram'
			add_values        "$(get_physical_ram_size ${mem_tmp})"
			add_value_footer  "MB"

			add_attribute     'RAM description'
			add_attribute     'RAM vendor'
			add_attribute     'RAM serial'
			add_attribute     'RAM slot'
			add_attribute     'RAM bits'
			add_attribute     'RAM speed'
			
			flush_values
		fi

	}

	function print_total_usage() {
		add_nc_header "Process%col%PID%col%usage MB%col%usage %%col%forks"
	}

	function get_physical_ram_size() {
	# Parameters:
	#  1  lshw xml memory node file 
	#     (output from `extr_lshw_node memory`)

		mem_tmp="${1}"
		local ram_size

		ram_size="$(grep size ${mem_tmp} | head -n 1 | grep -Eo '[0-9]+')"
		bc -l <<< scale=1\;$ram_size/1024/1024
	}

	function get_available_ram() {
		free | grep ^Mem | awk {'print $2'}
	}
