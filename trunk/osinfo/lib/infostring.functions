###########################################################################
### infostring handler functions
##
# add_header(), add_footer(), add_attribute(), add_values(), flush_values()
# there are a few more but these comments aren't updated yet...
# -------------------------------------------------------------------------
# these are a group of functions that are used by the modules to formulate the output.
#
# flush_values calls either print_xml, print_lanforce_xml or print_stdout
# depending on the parameters the user has set during invocations of osinfo.
#
# the other functions use the $infostring[] to store the information
# collected by the modules. the format of this array is like:
# [%header%System information] [%attribute%Operating system;os] [Linux]
# detailed information is given in each function.
###########################################################################

##################
# module_header
#
# Prints module header
# Parameters:
#   1 string	Module name
module_header() {
	case "$output_mode" in
		'stdout')
			# only print module header if being verbose
			#if [ $isverbose -ge 1 ]; then
			#	print_line
			#	echo -n "${tcRED}${tUNDERLINE}"
			#	echo -n "Report from module"
			#	echo "${tSTD}${tUNDERLINE} ${tcGREEN}$@${tSTD}:"
			#	print_line
			#fi
				print_line
				echo "${tUNDERLINE}${tcGREEN}$@${tSTD}:"
				print_line
			;;

		'xml')
			# make valid xml tag
			local xml_tag="$(validate_xml_item "${1}")"
			add_header "${xml_tag}"
			xsl_template_match_start "${xml_tag}" >> "${XSLFILE}"
			xsl_h2 "${@}" >> "${XSLFILE}"
			;;

		'kdialog')
			local k_title="$1"
			;;
		*)
			info "Improper output mode; THIS IS A BUG"
			flush_values
			exit 1
	esac
}


############################
# add_header, add_nc_header
#
# this function inserts the input string as the last available item
# in the $infostring array. it also adds a %header% tag which will be
# use by print_* functions to interpret how to parse the string.
#
# Parameters: (example eth0)
#   1 the header. will be printed to stdout and without $2 to xml as <eth0>
#   2 xml syntax modifier. if "iface name", then xml tag will be <iface name="eth0">
function add_header() {
	infostring[${#infostring[@]}]="%header%${1};${2}"
	# HACK: As syntax highlighting seems broken in my editor I add this comment hack as a workaround: "
	OpenHeaders=("${OpenHeaders[@]}" "${1};${2}")
}
# same as above, but without color. some modules use this because of
# a bug in the 'column' program
#
# Parameters: (example eth0)
#   1 the header. will be printed to stdout and without $2 to xml as <eth0>
#   2 xml syntax modifier. if "iface name", then xml tag will be <iface name="eth0">
function add_nc_header() {
	infostring[${#infostring[@]}]="%nc_header%${1};${2}"
	# HACK: As syntax highlighting seems broken in my editor I add this comment hack as a workaround: "
	OpenHeaders=("${OpenHeaders[@]}" "${1};${2}")
}


##############
# add_footer
#
# adds a footer tag to infostring.
# Parameters:
#  1 xml closing tag <string> (optional)
# if no parameter is given, close last open header.
function add_footer() {
	if [ "$1" ]; then
		infostring[${#infostring[@]}]="%footer%${@}"
	else
		close_last_header
	fi

	unset OpenHeaders[$((${#OpenHeaders[@]}-1))]
}


################
# add_attribute
#
# This function inserts the input string(s) as the last available item
# in the $infostring array, with a field delimiter of ";".
# it also adds an %attribute% tag which will be use by print_* functions
# to interpret how to parse the string.
# Parameters:
#  1 free-form name    (eg. Operating system)   (required)
#  2 code tag for xml  (eg. os)                 (optional)
function add_attribute() {
	infostring[${#infostring[@]}]="%attribute%${1};${2}"
}


#############
# add_values
#
# This function inserts the input strings into the $infostring[] array.
#
# if the value is empty, or just whitespaces, remove the preceding attribute,
# if verbosity does not require extreme explicity (-vv)
function add_values {
	if [ ! "$@" ] || \
	   [ ! "$(grep '[^\ *]' <<< "${@}")" ]; then
#	   [ $isverbose -lt 2 ]; then
		# if the last non-empty item (second to last)
		# is an attribute or a header, unset it
		if [ "$(grep 'attribute\|header' <<< ${infostring[$((${#infostring[@]}-1))]} )" ]; then
			unset infostring[$((${#infostring[@]}-1))]
		fi
	else # there is an input value
		# clear leading whitespaces
		local value="$(sed 's/^\ *//' <<< ${@})"
		infostring[${#infostring[@]}]="%value%${value}"
	fi
}


###################
# add_value_footer
#
# This function inserts a value_footer, which indicates a dimension, eg. <footer>kB/s</footer>.
function add_value_footer {
	infostring[${#infostring[@]}]="%value_footer%${@}"
}


################
# flush_values
#
# calls the print functions and clears the $infostring
function flush_values {
	# close all open headers
	local hdr
	for hdr in $(seq ${#OpenHeaders[@]} -1 1); do
		((hdr--)) # correct offset
		add_footer "${OpenHeaders[$hdr]}"
	done

	# then output according to user settings, xml or normal
	if [ $usexml -eq 0 ]; then
		print_stdout
	elif [ $usexml -eq 1 ] && [ $lanforce -eq 0 ]; then
		print_xml >> "${XMLFILE}"
		xsl_template_stop >> "${XSLFILE}"
	else
		print_lanforce_xml >> "${XMLFILE}"
	fi

	# infostring is set at functions add_*
	# and needs to be reset here so that the informaton
	# from this module will not be reprinted later
	unset infostring
}


#####################
# close_last_header
#
# this function searches the $infostring array backwards,
# looking for open headers. this is called from add_footer.
function close_last_header() {
	local IFS_bak="$IFS"
	IFS=$' \t\n'

	local found="" position item
	for position in $(seq ${#infostring[@]} -1 0); do
		item="${infostring[$position]}"
		# first collect %footer%s into $found array
		if [ "$(grep '^%footer%' <<< "${item}")" ]; then
			found="$(grep '^%footer%' <<< "${item}" | sed s/%footer%//)"

		# then continue and add a footer if it is not already found
		elif [ "$(grep '^%header%' <<< "${item}")" ]; then
			item="$(sed "s/%header%//" <<< "${item}")"

			if [ "${item}" != "${found}" ]; then
			#found[${#found[@]}]="$(echo ${item} | \
			#	grep '^%header%' | sed s/%header%/%footer%/)"
			# then test if this has
			#echo $found
				infostring[${#infostring[@]}]="%footer%${item}"
				# HACK: As syntax highlighting seems broken in my editor I add this comment hack as a workaround: "
				break;
			fi
		fi
	done

	IFS="$IFS_bak"

	#for VL in $(seq 0 ${#infostring[@]}); do
	#	echo ${infostring[$VL]}
	#done
}

#################################################################

# HACK: As syntax highlighting seems broken in my editor,
# I add this quotation mark as a workaround: " -AnMaster

