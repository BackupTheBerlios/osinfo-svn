#!/bin/bash
############################################
# XML HEADER & FOOTER FUNCTIONS
# -----------------------------
function print_xml_header () {
	# initialize variables (ip, timestamp)

	# should be more accurate, as there may be many network cards + ip addresses
	local ip="$(ifconfig $interface_name | \
		grep -Eio 'inet[A-Za-z: ]*([0-9]{1,3}\.){3}[0-9]{1,3}' | \
		grep -Eo '[0-9\.]+' | head -n 1)"

	local timestamp="$(date +%Y-%m-%d\ %H:%M:%S)"


	###############
	# STANDARD XML
	if [ $lanforce -eq 0 ]; then

		#!DOCTYPE
		xml_doc_start 'osinfo' 'SYSTEM' 'osinfo.dtd'
		# osinfo
		xml_tag_start "${appname}"

		XML_INDENT=1

		print_xml_computer_overview

	###############
	# LANFORCE XML
	elif [ $lanforce -eq 1 ]; then

		# AnMaster: To produce valid XML that *needs* to be "entityset"...
		xml_doc_start 'entityset' 'SYSTEM' 'lanforce.dtd'
		lf_entity_start "$(get_hostname)" "$ip"

	fi
}

function print_xml_footer () {
	if [ "$lanforce" == 1 ]; then
		lf_entity_stop
	else
		xml_tag_stop "${appname}"
	fi
}


print_xml_computer_overview () {

	# osinfo version
	add_indentation
	xml_param_tag_closed "script version" \
	"${major_version}.${minor_version}.${micro_version}-${patch_version} ${dev_status}"

	add_indentation
	xml_opentag_start "computer"

	# profile
	xml_opentag_param "profile" "${profile}"

	# hostname
	xml_opentag_param "hostname" "$(get_hostname)"

	# IP address
	#add_indentation
	#xml_param_tag_closed "computer ipv4" "${ip}"

	# DNS Domain
	xml_opentag_param "domain" "${get_dns_domain}"

	# operating system
	xml_opentag_param "os" "$(get_operating_system)"

	# processor
	xml_opentag_param "cpu" "$(get_cpu_model)"

	xml_opentag_stop 0

	# scanning date
	add_indentation
	xml_param_tag_closed "scanning date" "${timestamp}"
}
############################################






################################################################################
# print_xml(), print_lanforce_xml(), print_stdout()
# -------------------------------------------------
# this set of functions formulates the items in $infostring for output.
# detailed information is given in each function.


# This function formulates $infostring for stdout
# header tags are printed; attribute names are printed;
# values for each attribute are printed on the same line,
# and indentation is formed with the 'column' tool.
function print_stdout {
	local header_color="${tcMAGENTA}"
	local info_color="${tcYELLOW}"
	local item itemnr value_string=""
	local indentation=""

	for itemnr in $(seq 1 1 ${#infostring[@]} ); do
		((itemnr--)) # correct offset to start at zero
		item="${infostring[$itemnr]}"
		# case by the "%identifier%" tag
		case $(awk -F% {'print $2'} <<< ${item}) in

			'value')
				# add item to the value string,
				# leaving the value identifier in
				value_string="${value_string}${item}";
				;;

			'value_footer')
				# strip tag and discard the xml code tag
				item="$(sed s/%value_footer%// <<< "${item}" )"
				# add item to the value string,
				# the preceding space is intentional.
				value_string="${value_string} ${item}";
				indentation=""
				;;

			'attribute')
				# strip tag and discard the xml code tag
				item="$(sed s/%attribute%// <<< "${item}" | \
				        awk -F\; {'print $1'})"
				# add item to the value string,
				# each attribute starts with a newline
				value_string="${value_string}\n${indentation}${item}";
				;;

			'header')
				# strip tag, do not care of the xml modifier
				item="$(sed 's/%header%//' <<< "${item}" | \
				        awk -F\; {'print $1'} )"
				# add item to the value string,
				# each header starts with a newline,
				# and is printed in special color
				value_string="${value_string}\n${header_color}${item}${tSTD}";
				;;

			'nc_header')
				# strip tag
				item="$(sed s/%nc_header%// <<< "${item}" | \
				        awk -F\; {'print $1'} )"
				# add item to the value string,
				# each header starts with a newline,
				# and is printed in special color
				value_string="${value_string}\n${item}";
				;;

			'subheader')
				# strip tag, do not care of the xml modifier
				item="$(sed 's/%subheader%//' <<< "${item}" | \
				        awk -F\; {'print $1'} )"
				# add item to the value string,
				# each header starts with a newline,
				# and is printed in special color.
				# add indentation of two spaces
				value_string="${value_string}\n \_ ${header_color}${item}${tSTD}";
				indentation=" \__ "
				;;

			'nc_subheader')
				# strip tag
				item="$(sed s/%nc_subheader%// <<< "${item}" | \
				        awk -F\; {'print $1'} )"
				# add item to the value string,
				# each header starts with a newline,
				# and is printed in special color.
				# add indentation of two spaces
				value_string="${value_string}\n \_ ${item}";
				indentation=" \__ "
				;;

			'footer')
				indentation=""
				;;

			'info')
				# strip tag
				item="$(sed s/%info%// <<< "${item}")"
				# add item to the value string,
				# each info note starts with a newline,
				# and is printed in special color
				value_string="${value_string}\n${info_color}${item}${tSTD}";
				;;

		esac
	done

	# EXPLANATION OF THE INDENTATION SOLUTION
	# this is a trick to overcome the limitation in column;
	# use the special character '?' as the column delimiter, since
	# it won't accept a string. the character _has_ to be ascii-standard.
	# the column delimiter can be %value% or %col%

	# the bad thing is that column interprets color codes as characters,
	# and using colours on $value_string messes up column.

	echo -e $(sed 's/%value%/\?/g ; s/%col%/\?/g' <<< ${value_string}) | \
	          column -t -s?
	echo
}


# This function loops the $infostring and does a case on each item
function print_xml {
	local item itemnr code idtag iddesc value_item
	attrib_status="closed"

	# if you want to hack this, look at the case structure.
	# it is hierarchic because values may have footers, and
	# the attribute shouldn't be closed before the proper footer
	# is already added.. sorry for the confusion :)

	for itemnr in $(seq 1 1 ${#infostring[@]} ); do

		((itemnr--)) # correct offset to start at zero

		item="${infostring[$itemnr]}"
		idtag="$(awk -F% {'print $2'} <<< ${item})"

		# nice debugging tool
		#echo $item

		# case by the "%identifier%" tag
		case $idtag in

			# adds the footer (value dimension)
			'value_footer')
				add_indentation

				# strip tag and discard the xml code tag
				item="$(sed s/%value_footer%// <<< "${item}" )"
				# send the preceding value and the footer to xmlfile.
				xml_value "$value_item ${item}"
				unset value_item
			;;

			# add everything else but the footer
			*)
				# if the value item is set (no footer), then print value
				if [ "$value_item" ]; then
					add_indentation

					xml_value "$value_item"
					unset value_item
				fi

				# another case, which prints most everything
				case $idtag in

				'value')
					# the following sed removes all formatting tags
					# from the value string. it's a tad slow, though.
					# put value_item on hold for value_footer
					value_item="$(sed 's/%value%// ; s/\\[a-z]//g;s/^ *//' <<< "${item}")"

					#xml_value "${item}" >> "${XMLFILE}"
				;;

				*)

					# no more values, then close attribute tag
					if [ "$attrib_status" == "open" ]; then
						close_attribute_tag
					fi

					case $idtag in

						'attribute')
							iddesc="$(awk -F% {'print $3'} <<< ${item})"
							iddesc="$(awk -F\; {'print $1'} <<< ${iddesc})"
							item="$(validate_xml_item "${item}")"
							open_attribute_tag "$item"

							add_indentation
							xml_description "$iddesc"
						;;

						'header'|'subheader')
							## add indentation
							add_indentation

							# strip tag
							item="$(sed -r s/%\(sub\)?header%// <<< "${item}")"
							code="$(awk -F\; {'print $2'} <<< "${item}" )"
							item="$(awk -F\; {'print $1'} <<< "${item}" )"
							item="$(validate_xml_item "${item}")"

							# modify xml output due to contents of $item
							if [ "$code" != "" ]; then
								xml_param_tag "${code}" "${item}"
							else
								xml_tag_start "${item}"
							fi

							unset code
							((XML_INDENT++))
						;;

						'footer')
							((XML_INDENT--))
							add_indentation

							# strip tag
							item="$(sed s/%footer%// <<< "${item}")"
							item="$(validate_xml_item "${item}")"
							xml_tag_stop "${item}"
						;;
					esac
				esac
			;;
		esac
	done
}

#############################
## print_xml helper functions
	add_indentation() {
		for indent in $(seq 1 1 $XML_INDENT); do
			echo -ne "\t"
		done
	}

	close_attribute_tag() {
		### CLOSE ATTRIBUTE TAG
		## add indentation
		((XML_INDENT--))
		add_indentation

		xml_attribute_stop
		echo >> "${XMLFILE}"
		attrib_status="closed"
	}

	open_attribute_tag() {
		add_indentation

		# parse item
		item="$(sed s/%attribute%// <<< "${item}")"
		code=$(awk -F\; {'print $2'} <<< "${item}")
		# item validation strips away the code
		item="$(validate_xml_item "${item}")"
		xml_attribute_start "${item}" "${code}"
		((XML_INDENT++))
		attrib_status="open"
	}

	validate_xml_item() {
		# uppercase to lowercase ; spaces to downscores ; trim all leading spaces
		awk -F\; {'print $1'} <<< "${1}" | \
			sed 's/\\[a-z]//g; s/\ \|\//_/g ; s/^\ *//' | tr 'A-Z' 'a-z'
	}
#######


# This function prepares the output xml to conform to the LanForce dtd.
# LanForce is a commercial company who hired a dev to do this script
# and that dev continued on an existing script.
# works pretty much the same as print_xml()
print_lanforce_xml() {
	local item itemnr code
	attrib_status="closed"

	for itemnr in $(seq 1 1 ${#infostring[@]} ); do

		((itemnr--)) # correct offset to start at zero

		item="${infostring[$itemnr]}"
		idtag="$(awk -F% {'print $2'} <<< ${item})"

		# case by the "%identifier%" tag
		case $idtag in

			'value')
				# only print value for an attribute that is printed!
				if [ "$attrib_status" == "open" ]; then
					# the following sed removes all formatting tags
					# from the value string. it's a tad slow, though.
					item="$(sed 's/%value%// ; s/\\[a-z]//g;s/^ *//' <<< "${item}")"
					# echo three spaces as indentation
					echo -ne "   "
					xml_value "${item}"
				fi
			;;

			'value_footer')

				if [ "$attrib_status" == "open" ]; then
					# strip tag and discard the xml code tag
					item="$(sed s/%value_footer%// <<< "${item}" )"
					# add item to the value string,
					# the preceding space is intentional.
					lf_value_footer "${item}"
				fi
			;;

			'attribute')
				# parse item
				item="$(sed s/%attribute%// <<< "${item}")"
				code=$(awk -F\; {'print $2'} <<< "${item}")

				if [ "$attrib_status" == "open" ]; then
					close_lf_attribute_tag
				fi

				if [ "$code" != "" ]; then
					name=$(awk -F\; {'print $1'} <<< "${item}")

					echo -ne "  "
					xml_attribute_start "${name}" "${code}"

					attrib_status="open"
				fi
			;;
		esac
	done

	[ "$attrib_status" == "open" ] && close_lf_attribute_tag
}
#############################
## print_lanforce_xml helper functions
	close_lf_attribute_tag() {
		### CLOSE ATTRIBUTE TAG
		## add indentation

		echo -ne "  "
		xml_attribute_stop
		attrib_status="closed"
	}
################################################################################


