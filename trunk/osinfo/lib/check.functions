function Check_logfile {
	if [ ! -e "$error_log" ]; then
		touch "${error_log}" && chmod 664 "${error_log}"
		[[ $0 -ne 0 ]] && \
			info	"Could not create log file $error_log."
	fi

	if [ ! -w "$error_log" ]; then
		info	"Log file '$error_log' is not writable by you."
	fi
}

function Check_rundir {
	if [ ! -e "$rundir" ]; then
		if [ ! $(touch "$rundir" &>/dev/null) ]; then
			info	"Could not create directory '$rundir' for runtime files."
		fi
	fi

	if [ ! -w "$rundir" ]; then
		info	"Runtime file directory is not writable by you."
	fi
}

# checks application requirements
# Parameters
#  1  application
CheckReq() {
	if [ "$(type -p ${1})" ]; then
		return 0
	else
		info    "Please install ${1} to collect this information"
		flush_values
		return 1
	fi
}

##
# Checks for lshw and print a message if it doesn't exist
# Returns 0 if lshw eixsts and 1 if it is missing.
# DEPRECATED
CheckReq_lshw() {
	if [ ! "$(type -p lshw)" ]; then
		info    "Please install lshw to collect this information"
		flush_values
		return 1
	else
		return 0
	fi
}

##
# Checks for dmidecode and print a message if it doesn't exist
# Returns 0 if dmidecode eixsts and 1 if it is missing.
CheckReq_dmidecode() {
	if [ ! "$(type -p dmidecode)" ]; then
		info    "Please install dmidecode to collect this information"
		flush_values
		return 1
	else
		return 0
	fi
}


##
# Check if the system has working sensors
CheckReq_sensors() {
	if [ "$(type -p sensors)" ]; then
		# FIXME: make better sensor-detecting scheme
		if [ "$(sensors 2>/dev/null | grep -i vcore)" ]; then
			return 0
		else
			return 1
		fi
	else
		return 1
	fi
}


##
# Checks if we are run as root and print a message if we are not.
# Returns 0 if we are root and 1 if we are not.
CheckReq_root() {
	# give a parameter is the standard output info is not describable enough
	if [ ! "$@" ]; then
		local msg="this information"
	else
		local msg="$@"
	fi

	if [ "$EUID" != 0 ]; then
		info    "Please run $appname as super-user to collect $msg"
		flush_values
		return 1
	else
		return 0
	fi
}

#############################
# check the smartctl version >5.36, for SATA drives.
# It seems that some data can be acquired with older smartctl's too.
CheckReq_smartctl() {
	if [ "$(type -p smartctl)" ]; then
		#local smartctl_version="$(smartctl --version | \
		#	grep -Eo 'version [0-9.]+' | grep -Eo '[0-9]\.[0-9]+')";
		#diff="$(bc -s <<< $smartctl_version-5.36 )"
		# check if the difference is (not) negative
		#if [ ! "${diff:0:1}" = "-" ]; then
		# this is a newer version which supports SATA
			return 0
		else
			info	"Please install Smartmontools v5.36 or later."
			return 1
		#fi
	fi
}

# Tests a string
# Input : string to test ($1)
# Output : true or false
is_yes () {
	echo "$1" | grep -qi '^yes$'
}

# Tests a string
# Input : string to test ($1)
# Output : true or false
is_no () {
	echo "$1" | grep -qi '^no$'
}

