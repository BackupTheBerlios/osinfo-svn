#!/bin/bash
################################################################################
################################################################################
## osinfo daemon functions                                                    ##
################################################################################
################################################################################

################
## listen_tcp ##
################
#
# listens to a tcp port, writes the input xml to $rundir,
# generates a html from the file and updates the index.html
#
listen_tcp() {
	info "$appname daemon running..." # inform the user...
	if [ $isverbose -ge 1 ]; then
		PRINT_Version
		info "Listening to tcp connections from $tcp_listening_port..."
	fi

	info "Press Ctrl-Z to exit"
	flush_values

	# variables
	local clients client_hostname

	# create hosts dir if it doesn't exist
	[ ! -e "${hostdir}" ] && mkdir -p "${hostdir}"

	# allocate a temp file
	inputxml_tmp="$(mktemp /tmp/osinfo.XXXXXX)"

	# verbose output for debugging
	if [ $isdebug -eq 1 ]; then
		echo "XML will be saved to $inputxml_tmp"
		chmod 644 $inputxml_tmp
	else
		# don't add this temp file to the list, because
		# we don't want to delete this one!
		TempFiles=("${TempFiles[@]}" "$inputxml_tmp")
	fi

	# kill other netcat instances (nc often hangs)
	killall -9 nc 2>/dev/null

	# in an eternal loop listen to incoming data
	while (true); do

		netcat_instance	> "${inputxml_tmp}"	# which breaks after EOF

		# notify the user of the received file
		info "$(date)"
		info "$(wc -l $inputxml_tmp | grep -Eo '^[0-9]*') lines caught!"
		flush_values

		# if the input is (not) valid osinfo xml..
		if [ ! "$(grep -i '<!doctype osinfo' ${inputxml_tmp})" ]; then
			info "Input is not valid osinfo xml!"

		else

			update_hostxml "${inputxml_tmp}" # save input to correct location
			if [ $makehtml -eq 1 ]; then     # if we want html ...

				# update all host html pages
				update_hosthtmls

				# update the sidebar html
				update_sidebar > "${rundir}/sidebar.html"

				# create/update the index (overview) xml
				create_indexxml > "${INDEXXMLFILE}"

				# update the overview html (the right hand panel)
				update_index >  "${rundir}/overview.html"

				# inform the user of the generated files
				if [ $isverbose -ge 1 ]; then
				    if [ -e "${INDEXXMLFILE}" ]; then
						info "File '$INDEXXMLFILE' created"
					fi
					flush_values
				fi
			fi
		fi

		flush_values
		unset client_hostname

		# :)

	done

	cleanup_temp_files
}


####################
# create_indexxml ##
####################
#
# creates index.xml
create_indexxml() {
	local host

	print_xml_header

	for profile in ${PROFILES}; do

		# if the profile type is found in one file..
		if [ "$(grep -l profile\=\"$profile ${hostdir}/*.xml 2> /dev/null)" ]; then

			add_indentation
			((XML_INDENT++))
			xml_tag_start "${profile}s"

			# run a loop for all xml files in the hosts dir
			for host in $(grep -l profile\=\"$profile ${hostdir}/*.xml 2> /dev/null); do

				print_short_client_id

			done

			((XML_INDENT--))
			add_indentation
			echo "</${profile}s>"

		fi

	done

	print_xml_footer
}


print_short_client_id() {
	local hostname="$(extract 'computer hostname' ${host} )"
	if [ "$hostname" ]; then

		# <hostname>
		add_indentation
		xml_tag_start "$hostname"
		((XML_INDENT++))

			# hostname
			add_indentation
			xml_param_tag_closed "computer hostname" "$(extract 'computer hostname' ${host} )"

			# operating system
			add_indentation
			xml_param_tag_closed "computer OS" "$(extract 'computer OS' ${host} )"

			# processor
			add_indentation
			xml_param_tag_closed "computer CPU" "$(extract 'computer CPU' ${host} )"

			# profile
			add_indentation
			xml_param_tag_closed "computer profile" "$profile"

		((XML_INDENT--))

		# </hostname>
		add_indentation
		xml_tag_start "/$hostname"

	fi
}


##################
## update_index ##
##################
#
# creates (or updates by overwriting) the index.html in the runfolder.
# NOTE: this function should not generate any info messages to stdout!
#
update_index() {
	if [ -e "${xsltdir}/index.xsl" ]; then

		# run a loop for all xml files in the hosts dir -
		# do not change quotation, or else xsltproc will fail!
		for clients in "${hostdir}/*.xml"; do

			xsltproc "${xsltdir}/index.xsl" $clients 2> "$error_log"

		done

	else
		info "index.xsl template file was not found in '${xsltdir}'!"
		flush_values
	fi

	# inform the user
	#if [ $isverbose -ge 1 ] && [ -e "${rundir}/overview.html" ]; then
	#	echo "File '${rundir}/overview.html' updated"
	#	flush_values
	#fi
}


update_hostxml() {
	# input is $1
	# if client_hostname is already defined, it won't be used
	# (which is an unlikely scenario)

	# extract hostname from the xml
	[ ! "$client_hostname" ] && \
	client_hostname="$(extract 'hostname' ${1} )"

	# create or update the xml file for the host
	cat "$inputxml_tmp" > "${hostdir}/${client_hostname}.xml"
	[ $isverbose -ge 1 ] && \
		info "File '${hostdir}/${client_hostname}.xml' saved" && \
		flush_values
}


update_hosthtmls() {
	# reads the content of hosts/ dir for xml files and generates
	# the html pages
	#
	#
	# run a loop for all xml files in the hosts dir -
	# do not change quotation, or else xsltproc will fail!
	for clients in ${hostdir}/*.xml; do

		# extract hostname from the xml
		client_hostname="$(extract 'hostname' ${clients} )"

		# create or update <hostname>.html.
		# if the specific <hostname>.xsl is not found, use 'generic-host.xsl'
		if [ -e "${xsltdir}/${client_hostname}.xsl" ]; then
			xsltproc "${xsltdir}/${client_hostname}.xsl" \
					 "${hostdir}/${client_hostname}.xml" > \
					 "${hostdir}/${client_hostname}.html" 2> "$error_log"

		elif [ -e "${xsltdir}/generic-host.xsl" ]; then
			xsltproc "${xsltdir}/generic-host.xsl" \
					 "${hostdir}/${client_hostname}.xml" > \
					 "${hostdir}/${client_hostname}.html" 2> "$error_log"
		else
			info "No applicaple xsl template files found in '${xsltdir}'!"
		fi

		# inform the user
		if [ $isverbose -ge 1 ] && [ -e "${hostdir}/${client_hostname}.html" ]; then
			info "File '${hostdir}/${client_hostname}.html' updated"
			flush_values
		fi

	done
}


extract() {
	# $1 is the extract method
	# $2 is the input file
	grep -oi "${1}=\"[a-zA-Z0-9.]*\"" "${2}" | \
	   sed 's/[^\"]*\"\([^\"]*\)\"[^.]*/\1/'
}


#####################
## netcat_instance ##
#####################
#
# which breaks after EOF
netcat_instance() {
	# listen for incoming xml files
	if [ $isverbose -ge 1 ]; then
		netcat -v -l -p $tcp_listening_port
	else
		netcat -l -p $tcp_listening_port
	fi
}


###
# makes a generic host-xsl template
generate_generic_host_xsl() {
	cat <<EOF>> "${xsltdir}/generic-host.xsl"
TODO
EOF
}
