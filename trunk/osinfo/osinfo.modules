#!/bin/bash
################################################################################
# List System information                                                      #
################################################################################
# Written by Arvid Norlander                                                   #
# Some documentation are in Swedish                                            #
# Some parts are taken from:                                                   #
#   --Advanced Bash Scripting Guide (ABS)                                      #
################################################################################

MODULES='distro applications terminal network devices users processor system lsmod'
MODULES_REAL_ROOT_ONLY='system terminal applications network devices modprobe'

ETH_DEVICE="eth0"


################################################################################
################################################################################
## Modules                                                                    ##
################################################################################
################################################################################

Module_system() {
	print_module_header 'system'
	add_name_value_pair 'Operating system'      "$(${Uname} --operating-system)"
	add_name_value_pair 'Network node hostname' "$(${Uname} --nodename)"
	add_name_value_pair 'Kernel release'        "$(${Uname} --kernel-release)"
	add_name_value_pair 'Machine hardware name' "$(${Uname} --machine)"
#	add_name_value_pair 'Kernel version'        "$(${Uname} --kernel-version)" # doesn't work on all distros
	flush_name_value_pair
}

Module_processor() {
	print_module_header 'processor'
	add_name_value_pair 'Processor model'       "$(cat /proc/cpuinfo | $Grep 'model name' | $Awk -F': ' {'print $2'})"
	add_name_value_pair 'Processor frequency'   "$(cat /proc/cpuinfo | $Grep 'cpu MHz' | $Awk -F': ' {'print $2" MHz"'})"
	flush_name_value_pair
}

Module_terminal() {
	print_module_header 'Terminal info'
	add_name_value_pair 'Terminal type'         "$TERM"
	add_name_value_pair 'Terminal speed'        "$($Stty speed)"
	add_name_value_pair 'Rows'                  "$($Stty size | $Awk '{print $1}')"
	add_name_value_pair 'Columns'               "$($Stty size | $Awk '{print $2}')"
	flush_name_value_pair
}

Module_applications() {
	print_module_header 'Application version information'
	for APP in 'bash' 'gcc' 'make' 'find' 'awk' 'sed' 'grep' 'gzip' 'ls' 'php' 'mysql'; do
		if [ "$(type -p $APP)" ]; then # it is installed
			add_name_value_pair $APP \
				"$($APP --version 2>&1 | ${Head} -n 1)" #$Grep  -P '[0-9]+\.[0-9]+' | $Sed 's/^tune2fs //')"
		fi
	done
	flush_name_value_pair
}		

Module_users() {
	print_module_header 'Users and processes'
	add_name_value_pair 'Last logged in user' 	"$(${Last} | ${Head} -n 1)"
#	add_name_value_pair 'Users' 			"$(${Ls} /home/)"
#	add_name_value_pair 'Groups'  			"$(cat /etc/group | $Awk -F: {'print $1'} | $Sed 's/\n/  /g')"

	# perhaps the solution is to ditch out standard linux non-human users, then print the rest

	flush_name_value_pair
}


Module_lsmod() {
	print_module_header 'loaded kernel modules'
	
	for MODULE in `${Lsmod} | ${Awk} {'print $1'} | grep -v Module`; do
		add_name_value_pair 'module' "$MODULE"
	done
	flush_name_value_pair
}


Module_network() {
	print_module_header 'Network information'
	
	local specials="UP|BROADCAST|LOOPBACK|NOARP|NOTRAILERS|RUNNING|MULTICAST"
	
	local interface_name="$ETH_DEVICE" # go and grep this from lspci

	add_name_value_pair 'Device'	"$interface_name"
	add_name_value_pair 'MAC'	"$(${Ifconfig} $ETH_DEVICE | grep -Eo '([0-9A-F]{2}:){5}[0-9A-F]{2}')"
	add_name_value_pair 'IP'	"$(${Ifconfig} $ETH_DEVICE | ${Sed} "s/  /\n/g" | ${Grep} -i inet | ${Grep} '\w' | ${Grep} -Eo '([0-9].{1,3}){4}')"
	add_name_value_pair 'Broadcast'	"$(${Ifconfig} $ETH_DEVICE | ${Sed} "s/  /\n/g" | ${Grep} -i Bcast | ${Grep} '\w' | ${Grep} -Eo '([0-9].{1,3}){4}')"
	add_name_value_pair 'Netmask'	"$(${Ifconfig} $ETH_DEVICE | ${Sed} "s/  /\n/g" | ${Grep} -i Mask | ${Grep} '\w' | ${Grep} -Eo '([0-9].{1,3}){4}')"
	
	add_name_value_pair 'RX bytes'	"$(${Ifconfig} $ETH_DEVICE | ${Sed} "s/  /\n/g" | ${Grep} -i 'RX bytes' )"	
	

	flush_name_value_pair
}


Module_devices() {
	print_module_header 'Devices'
	# the if sentence is there just for to make sure that no output is written for devices that don't exist

	unset DEV; DEV=$(${Lspci} | $Grep -i 'graphic\|vga' | $Awk -F': ' {'print $2'})
	if [ "$DEV" ]; then
		add_name_value_pair 'Display adapter' 		"$DEV"
	fi

	unset DEV; DEV=$(${Lspci} | $Grep -i 'ethernet' | $Awk -F': ' {'print $2'})
	if [ "$DEV" ]; then
		add_name_value_pair 'Ethernet controller'	"$DEV"
	fi

	unset DEV; DEV=$(${Lspci} | $Grep -i 'audio' | $Awk -F': ' {'print $2'})
	if [ "$DEV" ]; then
		add_name_value_pair 'Audio controller' 		"$DEV"
	fi

	unset DEV; DEV=$(${Lspci} | $Grep -i 'firewire' | $Awk -F': ' {'print $2'})
	if [ "$DEV" ]; then
		add_name_value_pair 'FireWire controller'	"$DEV"
	fi
	
	flush_name_value_pair
}


Module_distro() {
	print_module_header 'Distro identifier'
	# echo the root directory
	[ "$prefix" != '/' ] && \
		local root_dir="$(echo $prefix | $Sed 's/\/*$//')" || \
		local root_dir="$prefix"
	add_name_value_pair 'Root dir'  "$root_dir"
	
	# Begin searching for distro identifying files
	local found_files=""
	local fil
	for fil in ${prefix}etc/{SuSE-release,slackware-version,Topologilinux-version,gentoo-release,issue}; do
		[ -e $fil ] && found_files="$found_files $fil"
	done
	
	# Now make a list of distros from the $found_files list above
	local found_distros=""
	local distro_ident
	for distro_ident in $found_files; do
		case $distro_ident in
			"${prefix}etc/SuSE-release")
		    found_distros="$found_distros SuSE"
		    break;
		    ;;
		"${prefix}etc/slackware-version")
		    found_distros="$found_distros Slackware"
		    break;
		    ;;
		"${prefix}etc/Topologilinux-version")
		    found_distros="$found_distros Topologilinux"
		    break;
		    ;;
		"${prefix}etc/gentoo-release")
		    found_distros="$found_distros Gentoo"
		    break;
		    ;;
		# if nothing previous matches, then use issue
		"${prefix}etc/issue")
			found_distros="$found_distros misc"
			break;
			;;
		esac
	done
	# Remove beginning spaces.
	found_distros="$(echo "$found_distros" | $Sed "s/^ *//")"

	# Output distro name
	case "$found_distros" in
		'SuSE'|'Slackware'|'Slackware Topologilinux'|'Gentoo')
			[ "$found_distros" = 'Slackware Topologilinux' ] && found_distros='Topologilinux'
			add_name_value_pair 'Distro name'         "$found_distros"
			;;
		'Topologilinux')
		# Abort if found Topologilinux but not Slackware.
			if [ "$usekdialog" == "1" ]; then
				$Kdialog --error  "Topologilinux is based on Slackware and should contain\n${prefix}etc/slackware-version AND ${prefix}etc/Topologilinux-version.\nThis module will abort."
			else
				echo "${tcRED}ERROR:${tSTD} Topologilinux is based on Slackware and should"
				echo "${tcRED}ERROR:${tSTD} contain ${prefix}etc/slackware-version ${tBOLD}AND${tSTD} ${prefix}etc/Topologilinux-version."
				echo "${tcRED}This module will abort.${tSTD}"
			fi
			return 1
			;;
		'misc')
			for DISTRO in 'Ubuntu' 'Red Hat' 'Fedora' 'SUSE'; do
				if [ "$(${Grep} -i ${DISTRO} ${distro_ident})" ]; then 
					add_name_value_pair 'Distro name'         "$DISTRO"
				fi
			done
			;;
		'')
			# Abort if no distro found
			if [ "$usekdialog" == "1" ]; then
				$Kdialog --error  "You have zero distros installed or use a distro not recognised by ${appname}\nThis module will abort."
			else
				echo "${tcRED}ERROR:${tSTD} You have zero distros installed or use a distro not recognised by ${appname}"
				echo "${tcRED}This module will abort.${tSTD}"
			fi
			return 1
			;;
#	*)
#		# Abort if more than one distro
#		if [ "$usekdialog" == "1" ]; then
#			$Kdialog --error  "You have several distros installed at the same time.\nInstalled distros:\n${found_distros}\nThis module will abort."
#		else
#			echo "${tcRED}ERROR:${tSTD} You have several distros installed at the same time."
#			echo "${tcRED}ERROR:${tSTD} ${tBOLD}Installed distros:${tSTD} ${found_distros}"
#			echo "${tcRED}This module will abort.${tSTD}"
#		fi
#		return 1
#	;;
	esac
	# Output distro version
	case "$found_distros" in
		'SuSE')
			local distro_version="$($Fgrep 'VERSION = '     ${prefix}etc/SuSE-release          | $Sed 's/VERSION = //'    )" ;;
		'Slackware')
			local distro_version="$($Fgrep 'Slackware '     ${prefix}etc/slackware-version     | $Sed 's/Slackware //'    )" ;;
		'Topologilinux')
			local distro_version="$($Fgrep 'Topologilinux ' ${prefix}etc/Topologilinux-version | $Sed 's/Topologilinux //')"
			local  SlackwareBase="$($Fgrep 'Slackware '     ${prefix}etc/slackware-version     | $Sed 's/Slackware //'    )" ;;
		'Gentoo')
			local distro_version="$(ls -ld /etc/make.profile --color=no | grep -Eo '[0-9]{4}\.[0-9]')";;
		'misc')
			local distro_version="$(grep '.' "${prefix}etc/issue")";;
	esac
	add_name_value_pair 'Distro version' "$distro_version"
	[ "$SlackwareBase" ] && add_name_value_pair 'Based on Slackware version' "$SlackwareBase"
	# echo the whole table
	flush_name_value_pair
}

